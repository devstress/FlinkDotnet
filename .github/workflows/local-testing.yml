name: Local Testing - Aspire Environment Validation

on:
  workflow_call:
  workflow_dispatch:

jobs:
  run-local-testing-validation:
    name: Run Aspire LocalTesting Environment Validation
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Docker is running for Aspire
        run: docker info

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install .NET Aspire workload
        run: |
          Write-Host "üì¶ Installing .NET Aspire workload..." -ForegroundColor Green
          dotnet workload install aspire
          Write-Host "‚úÖ Aspire workload installed successfully" -ForegroundColor Green

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-solutions

      - name: Build LocalTesting Solution
        run: |
          Write-Host "üî® Building LocalTesting solution..." -ForegroundColor Green
          dotnet restore LocalTesting/LocalTesting.sln
          dotnet build LocalTesting/LocalTesting.sln --configuration Release --no-restore

      - name: Verify LocalTesting Build Artifacts
        run: |
          Write-Host "üîç Verifying LocalTesting build artifacts..." -ForegroundColor Green
          
          $appHostDll = "LocalTesting/LocalTesting.AppHost/bin/Release/net8.0/LocalTesting.AppHost.dll"
          $webApiDll = "LocalTesting/LocalTesting.WebApi/bin/Release/net8.0/LocalTesting.WebApi.dll"
          
          if (Test-Path $appHostDll) {
            Write-Host "‚úÖ AppHost build artifact found: $appHostDll" -ForegroundColor Green
          } else {
            Write-Host "‚ùå AppHost build artifact missing: $appHostDll" -ForegroundColor Red
            throw "LocalTesting.AppHost build failed"
          }
          
          if (Test-Path $webApiDll) {
            Write-Host "‚úÖ WebApi build artifact found: $webApiDll" -ForegroundColor Green
          } else {
            Write-Host "‚ùå WebApi build artifact missing: $webApiDll" -ForegroundColor Red
            throw "LocalTesting.WebApi build failed"
          }

      - name: Start Aspire Environment
        timeout-minutes: 15
        run: |
          Write-Host "üöÄ Starting Aspire environment with dashboard..." -ForegroundColor Green
          
          # Verify Aspire is working by testing the project build
          Write-Host "Verifying Aspire functionality..." -ForegroundColor Yellow
          Push-Location LocalTesting/LocalTesting.AppHost
          try {
            $buildOutput = dotnet build --configuration Release --verbosity quiet 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ Aspire is functional and project builds successfully" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Aspire build failed. Output:" -ForegroundColor Red
              Write-Host $buildOutput -ForegroundColor Red
              throw "Aspire functionality test failed"
            }
          }
          catch {
            Write-Host "‚ùå Aspire verification failed: $($_.Exception.Message)" -ForegroundColor Red
            throw "Aspire is not properly configured"
          }
          finally {
            Pop-Location
          }
          
          # Start the Aspire environment as a background process
          Push-Location LocalTesting/LocalTesting.AppHost
          
          # Set DCP and Dashboard paths for Aspire orchestration first
          $nugetPackages = "$HOME/.nuget/packages"
          
          # Set DCP CLI path using the installed orchestration package
          $dcpPath = "$nugetPackages/aspire.hosting.orchestration.linux-x64/9.3.1/tools/dcp"
          if (Test-Path $dcpPath) {
            $env:DCP_CLI_PATH = $dcpPath
            Write-Host "‚úÖ DCP CLI path set: $dcpPath" -ForegroundColor Green
          } else {
            Write-Host "‚ùå DCP CLI path not found at expected location: $dcpPath" -ForegroundColor Red
            throw "DCP CLI path is required but not found"
          }
          
          # Set Aspire Dashboard path using the installed dashboard SDK
          $dashboardPath = "$nugetPackages/aspire.dashboard.sdk.linux-x64/9.3.1/tools"  
          if (Test-Path $dashboardPath) {
            $env:ASPIRE_DASHBOARD_PATH = $dashboardPath
            Write-Host "‚úÖ Aspire Dashboard path set: $dashboardPath" -ForegroundColor Green
          } else {
            Write-Host "‚ùå Aspire Dashboard path not found at expected location: $dashboardPath" -ForegroundColor Red
            throw "Aspire Dashboard path is required but not found"
          }
          
          # Set all required environment variables for Aspire
          $env:ASPIRE_ALLOW_UNSECURED_TRANSPORT = "true"
          $env:ASPNETCORE_URLS = "http://localhost:15000"
          $env:ASPIRE_DASHBOARD_OTLP_ENDPOINT_URL = "http://localhost:4323"
          $env:ASPIRE_DASHBOARD_OTLP_HTTP_ENDPOINT_URL = "http://localhost:4324" 
          $env:ASPIRE_DASHBOARD_URL = "http://localhost:18888"
          $env:ASPNETCORE_ENVIRONMENT = "Development"
          $env:DOTNET_LAUNCH_PROFILE = ""
          
          Write-Host "Environment variables set:" -ForegroundColor Yellow
          Write-Host "  ASPNETCORE_URLS: $env:ASPNETCORE_URLS" -ForegroundColor Cyan
          Write-Host "  ASPIRE_DASHBOARD_OTLP_ENDPOINT_URL: $env:ASPIRE_DASHBOARD_OTLP_ENDPOINT_URL" -ForegroundColor Cyan
          Write-Host "  ASPIRE_DASHBOARD_OTLP_HTTP_ENDPOINT_URL: $env:ASPIRE_DASHBOARD_OTLP_HTTP_ENDPOINT_URL" -ForegroundColor Cyan
          Write-Host "  DCP_CLI_PATH: $env:DCP_CLI_PATH" -ForegroundColor Cyan
          Write-Host "  ASPIRE_DASHBOARD_PATH: $env:ASPIRE_DASHBOARD_PATH" -ForegroundColor Cyan
          
          Write-Host "Starting Aspire AppHost as background process..." -ForegroundColor Yellow
          try {
            # Start Aspire as a background process and capture the process ID
            $aspireProcess = Start-Process -FilePath "dotnet" -ArgumentList "run", "--configuration", "Release" -PassThru -RedirectStandardOutput "aspire_output.log" -RedirectStandardError "aspire_error.log" -NoNewWindow
            $global:AspirePID = $aspireProcess.Id
            Write-Host "‚úÖ Aspire AppHost started in background (PID: $global:AspirePID)" -ForegroundColor Green
            
            # Wait for initial startup and check for startup success
            Write-Host "Waiting for Aspire to initialize..." -ForegroundColor Yellow
            Start-Sleep -Seconds 45
            
            # Check startup output
            $startupOutput = ""
            if (Test-Path "aspire_output.log") {
              $startupOutput += Get-Content "aspire_output.log" -Raw
            }
            if (Test-Path "aspire_error.log") {
              $errorOutput = Get-Content "aspire_error.log" -Raw
              if ($errorOutput) {
                $startupOutput += "`nErrors: $errorOutput"
              }
            }
            
            # Check for startup success indicators
            if ($startupOutput -match "Distributed application starting" -and $startupOutput -match "Aspire version") {
              Write-Host "‚úÖ Aspire environment startup successful" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Aspire startup may have failed - missing expected startup messages:" -ForegroundColor Red
              Write-Host $startupOutput -ForegroundColor Red
              throw "Aspire startup failed with configuration errors"
            }
          }
          catch {
            Write-Host "‚ùå Failed to start Aspire environment: $($_.Exception.Message)" -ForegroundColor Red
            if ($startupOutput) {
              Write-Host "Startup output:" -ForegroundColor Yellow
              Write-Host $startupOutput -ForegroundColor Yellow
            }
            
            Pop-Location
            throw "Aspire environment startup failed: $($_.Exception.Message)"
          }
          
          Pop-Location

      - name: Wait for Aspire Services to Start
        timeout-minutes: 10
        run: |
          Write-Host "‚è≥ Waiting for Aspire services to start..." -ForegroundColor Green
          
          # Wait for services to start (give them more time to initialize)
          Write-Host "Waiting for Aspire environment to initialize (90 seconds)..." -ForegroundColor Yellow
          Start-Sleep -Seconds 90
          
          # Check Aspire dashboard accessibility
          Write-Host "Testing Aspire dashboard accessibility..." -ForegroundColor Yellow
          $maxRetries = 10
          $retryCount = 0
          $dashboardReady = $false
          
          while ($retryCount -lt $maxRetries -and -not $dashboardReady) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:18888" -TimeoutSec 5 -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ Aspire dashboard is accessible" -ForegroundColor Green
                $dashboardReady = $true
              } else {
                Write-Host "‚ö†Ô∏è Dashboard returned status: $($response.StatusCode)" -ForegroundColor Yellow
              }
            } catch {
              $retryCount++
              Write-Host "‚ö†Ô∏è Dashboard not ready yet (attempt $retryCount/$maxRetries): $($_.Exception.Message)" -ForegroundColor Yellow
              Start-Sleep -Seconds 5
            }
          }
          
          Write-Host "Checking Docker containers..." -ForegroundColor Yellow
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Check if we have some containers running
          $containerCount = (docker ps --format "{{.Names}}" | Measure-Object).Count
          Write-Host "Found $containerCount running containers" -ForegroundColor Cyan
          
          if ($containerCount -eq 0) {
            Write-Host "‚ùå No Docker containers are running. Aspire environment failed to start properly." -ForegroundColor Red
            throw "Aspire environment startup failed - no containers are running"
          }
          
          Write-Host "‚úÖ $containerCount containers are running" -ForegroundColor Green

      - name: Validate Aspire Infrastructure
        timeout-minutes: 5
        run: |
          Write-Host "üîç Validating Aspire infrastructure components..." -ForegroundColor Green
          
          $foundServices = @()
          $missingServices = @()
          
          # Check for Kafka containers
          $kafkaContainers = docker ps --filter "name=kafka" --format "{{.Names}}"
          if ($kafkaContainers) {
            Write-Host "‚úÖ Kafka containers found:" -ForegroundColor Green
            $kafkaContainers | ForEach-Object { Write-Host "  - $_" -ForegroundColor Cyan }
            $foundServices += "Kafka"
          } else {
            Write-Host "‚ö†Ô∏è No Kafka containers found" -ForegroundColor Yellow
            $missingServices += "Kafka"
          }
          
          # Check for Flink containers
          $flinkContainers = docker ps --filter "name=flink" --format "{{.Names}}"
          if ($flinkContainers) {
            Write-Host "‚úÖ Flink containers found:" -ForegroundColor Green
            $flinkContainers | ForEach-Object { Write-Host "  - $_" -ForegroundColor Cyan }
            $foundServices += "Flink"
          } else {
            Write-Host "‚ö†Ô∏è No Flink containers found" -ForegroundColor Yellow
            $missingServices += "Flink"
          }
          
          # Check for Redis containers
          $redisContainers = docker ps --filter "name=redis" --format "{{.Names}}"
          if ($redisContainers) {
            Write-Host "‚úÖ Redis containers found:" -ForegroundColor Green
            $redisContainers | ForEach-Object { Write-Host "  - $_" -ForegroundColor Cyan }
            $foundServices += "Redis"
          } else {
            Write-Host "‚ö†Ô∏è No Redis containers found" -ForegroundColor Yellow
            $missingServices += "Redis"
          }
          
          # Check for Temporal containers
          $temporalContainers = docker ps --filter "name=temporal" --format "{{.Names}}"
          if ($temporalContainers) {
            Write-Host "‚úÖ Temporal containers found:" -ForegroundColor Green
            $temporalContainers | ForEach-Object { Write-Host "  - $_" -ForegroundColor Cyan }
            $foundServices += "Temporal"
          } else {
            Write-Host "‚ö†Ô∏è No Temporal containers found" -ForegroundColor Yellow
            $missingServices += "Temporal"
          }
          
          # Check for Grafana containers
          $grafanaContainers = docker ps --filter "name=grafana" --format "{{.Names}}"
          if ($grafanaContainers) {
            Write-Host "‚úÖ Grafana containers found:" -ForegroundColor Green
            $grafanaContainers | ForEach-Object { Write-Host "  - $_" -ForegroundColor Cyan }
            $foundServices += "Grafana"
          } else {
            Write-Host "‚ö†Ô∏è No Grafana containers found" -ForegroundColor Yellow
            $missingServices += "Grafana"
          }
          
          Write-Host "‚ÑπÔ∏è LocalTesting API is an Aspire service (not a container)" -ForegroundColor Blue
          
          if ($foundServices.Count -gt 0) {
            Write-Host "‚úÖ Found Aspire services: $($foundServices -join ', ')" -ForegroundColor Green
          }
          
          if ($missingServices.Count -gt 0) {
            Write-Host "‚ö†Ô∏è Some services not started: $($missingServices -join ', ')" -ForegroundColor Yellow
            Write-Host "Note: This is normal in CI environment - continuing with available services" -ForegroundColor Cyan
          } else {
            Write-Host "‚úÖ All expected infrastructure components are running" -ForegroundColor Green
          }

      - name: Test LocalTesting WebAPI through Aspire
        timeout-minutes: 5
        run: |
          Write-Host "üåê Testing LocalTesting WebAPI through Aspire..." -ForegroundColor Green
          
          # The LocalTesting API is an Aspire service, not a Docker container
          # So we test endpoint accessibility directly
          Write-Host "‚ÑπÔ∏è LocalTesting API runs as Aspire service on port 5000" -ForegroundColor Blue
          
          # Test API accessibility with retry logic
          Write-Host "Testing LocalTesting API accessibility..." -ForegroundColor Yellow
          $maxRetries = 15
          $retryCount = 0
          $apiReady = $false
          
          while ($retryCount -lt $maxRetries -and -not $apiReady) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:5000/health" -TimeoutSec 5 -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ LocalTesting API is accessible and healthy" -ForegroundColor Green
                $apiReady = $true
              } else {
                Write-Host "‚ö†Ô∏è API returned status: $($response.StatusCode)" -ForegroundColor Yellow
              }
            } catch {
              $retryCount++
              Write-Host "‚ö†Ô∏è API not ready yet (attempt $retryCount/$maxRetries): $($_.Exception.Message)" -ForegroundColor Yellow
              Start-Sleep -Seconds 5
            }
          }
          
          if (-not $apiReady) {
            Write-Host "‚ùå LocalTesting API failed to become accessible through Aspire" -ForegroundColor Red
            throw "LocalTesting API not accessible through Aspire"
          }
          
          # Test other UI endpoints
          $testEndpoints = @(
            @{Port=8082; Name="Kafka UI"; Path="/"},
            @{Port=8084; Name="Temporal UI"; Path="/"},
            @{Port=3000; Name="Grafana"; Path="/"},
            @{Port=8081; Name="Flink JobManager UI"; Path="/"}
          )
          
          $accessibleEndpoints = @()
          $failedEndpoints = @()
          
          foreach ($endpoint in $testEndpoints) {
            try {
              Write-Host "Testing $($endpoint.Name) on port $($endpoint.Port)..." -ForegroundColor Yellow
              $uri = "http://localhost:$($endpoint.Port)$($endpoint.Path)"
              $response = Invoke-WebRequest -Uri $uri -TimeoutSec 10 -ErrorAction SilentlyContinue
              if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ $($endpoint.Name) is accessible (Status: $($response.StatusCode))" -ForegroundColor Green
                $accessibleEndpoints += $endpoint.Name
              }
            }
            catch {
              Write-Host "‚ö†Ô∏è $($endpoint.Name) not accessible: $($_.Exception.Message)" -ForegroundColor Yellow
              $failedEndpoints += $endpoint.Name
            }
          }
          
          Write-Host "‚úÖ LocalTesting WebAPI is successfully managed by Aspire" -ForegroundColor Green
          Write-Host "‚úÖ Accessible services: LocalTesting API$(if ($accessibleEndpoints.Count -gt 0) { ', ' + ($accessibleEndpoints -join ', ') })" -ForegroundColor Green
          if ($failedEndpoints.Count -gt 0) {
            Write-Host "‚ö†Ô∏è Some UI services not accessible: $($failedEndpoints -join ', ')" -ForegroundColor Yellow
          }

      - name: Final Aspire Environment Health Check
        run: |
          Write-Host "üîç Final Aspire environment health validation..." -ForegroundColor Green
          
          # Show all running containers
          Write-Host "Aspire-managed containers:" -ForegroundColor Yellow
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          
          # Show container resource usage
          Write-Host "`nContainer resource usage:" -ForegroundColor Yellow
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
          
          # Test Aspire dashboard final check
          Write-Host "`nAspire dashboard final check:" -ForegroundColor Yellow
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:18888" -TimeoutSec 5
            Write-Host "‚úÖ Aspire Dashboard: Status $($response.StatusCode)" -ForegroundColor Green
          } catch {
            Write-Host "‚ö†Ô∏è Aspire Dashboard: $($_.Exception.Message)" -ForegroundColor Yellow
          }
          
          # Test LocalTesting API final check
          Write-Host "`nLocalTesting API final check:" -ForegroundColor Yellow
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:5000/health" -TimeoutSec 5
            Write-Host "‚úÖ LocalTesting API: Status $($response.StatusCode)" -ForegroundColor Green
          } catch {
            Write-Host "‚ö†Ô∏è LocalTesting API: $($_.Exception.Message)" -ForegroundColor Yellow
          }
          
          Write-Host "‚úÖ Aspire environment health check completed!" -ForegroundColor Green

      - name: Summary Report
        run: |
          Write-Host "üìã LocalTesting Aspire Environment Summary" -ForegroundColor Green
          Write-Host "=" * 60 -ForegroundColor Green
          Write-Host "‚úÖ Aspire environment startup: SUCCESS" -ForegroundColor Green
          Write-Host "‚úÖ LocalTesting WebAPI deployment: SUCCESS" -ForegroundColor Green  
          Write-Host "‚úÖ Infrastructure validation: COMPLETED" -ForegroundColor Green
          Write-Host "‚úÖ Dashboard accessibility: TESTED" -ForegroundColor Green
          Write-Host "=" * 60 -ForegroundColor Green
          Write-Host "üéØ LocalTesting environment with Aspire dashboard is functional!" -ForegroundColor Green
          Write-Host "üéõÔ∏è Access Aspire Dashboard at: http://localhost:18888" -ForegroundColor Yellow
          Write-Host "üåê Access LocalTesting API at: http://localhost:5000" -ForegroundColor Yellow

      - name: Cleanup Aspire Environment
        if: always()
        run: |
          Write-Host "üßπ Cleaning up Aspire environment..." -ForegroundColor Green
          
          # Stop Aspire AppHost process
          try {
            if ($global:AspirePID) {
              Write-Host "Stopping Aspire AppHost process (PID: $global:AspirePID)..." -ForegroundColor Yellow
              Stop-Process -Id $global:AspirePID -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
            }
          } catch {
            Write-Host "Aspire AppHost process cleanup completed" -ForegroundColor Yellow
          }
          
          # Stop Aspire-managed containers
          Write-Host "Stopping Aspire-managed containers..." -ForegroundColor Yellow
          $containers = docker ps -q
          if ($containers) {
            docker stop $containers 2>$null
            Start-Sleep -Seconds 5
            docker rm $containers 2>$null
          }
          
          # Clean up any remaining processes
          try {
            $dotnetProcesses = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue
            if ($dotnetProcesses) {
              Write-Host "Stopping remaining dotnet processes..." -ForegroundColor Yellow
              $dotnetProcesses | Stop-Process -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
            }
          } catch {
            Write-Host "Process cleanup completed" -ForegroundColor Yellow
          }
          
          # Clean up Aspire log files
          try {
            Push-Location LocalTesting/LocalTesting.AppHost -ErrorAction SilentlyContinue
            if (Test-Path "aspire_output.log") { Remove-Item "aspire_output.log" -Force }
            if (Test-Path "aspire_error.log") { Remove-Item "aspire_error.log" -Force }
            Pop-Location
          } catch {
            Write-Host "Aspire log cleanup completed" -ForegroundColor Yellow
          }
          
          Write-Host "‚úÖ Aspire environment cleanup completed!" -ForegroundColor Green

      - name: Upload Aspire LocalTesting test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: aspire-local-testing-results
          path: |
            **/*.log
            **/*.txt
            LocalTesting/**/bin/Release/net8.0/**
            LocalTesting/LocalTesting.AppHost/aspire_*.log
          retention-days: 7