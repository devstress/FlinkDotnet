name: Local Testing - Interactive Environment Validation

on:
  workflow_call:
  workflow_dispatch:

jobs:
  run-local-testing-validation:
    name: Run Local Testing Interactive Environment Validation
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Docker is running
        run: docker info

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install .NET Aspire workload
        run: |
          Write-Host "üì¶ Installing .NET Aspire workload..." -ForegroundColor Green
          dotnet workload install aspire
          Write-Host "‚úÖ Aspire workload installed successfully" -ForegroundColor Green

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-solutions

      - name: Build LocalTesting Solution
        run: |
          Write-Host "üî® Building LocalTesting solution..." -ForegroundColor Green
          dotnet restore LocalTesting/LocalTesting.sln
          dotnet build LocalTesting/LocalTesting.sln --configuration Release --no-restore

      - name: Verify LocalTesting Build Artifacts
        run: |
          Write-Host "üîç Verifying LocalTesting build artifacts..." -ForegroundColor Green
          
          $appHostDll = "LocalTesting/LocalTesting.AppHost/bin/Release/net8.0/LocalTesting.AppHost.dll"
          $webApiDll = "LocalTesting/LocalTesting.WebApi/bin/Release/net8.0/LocalTesting.WebApi.dll"
          
          if (Test-Path $appHostDll) {
            Write-Host "‚úÖ AppHost build artifact found: $appHostDll" -ForegroundColor Green
          } else {
            Write-Host "‚ùå AppHost build artifact missing: $appHostDll" -ForegroundColor Red
            throw "LocalTesting.AppHost build failed"
          }
          
          if (Test-Path $webApiDll) {
            Write-Host "‚úÖ WebApi build artifact found: $webApiDll" -ForegroundColor Green
          } else {
            Write-Host "‚ùå WebApi build artifact missing: $webApiDll" -ForegroundColor Red
            throw "LocalTesting.WebApi build failed"
          }

      - name: Start LocalTesting Environment (CI-Compatible)
        timeout-minutes: 15
        run: |
          Write-Host "üöÄ Starting LocalTesting environment for CI..." -ForegroundColor Green
          Write-Host "Using Docker Compose for CI compatibility (Aspire DCP has known issues in GitHub Actions)" -ForegroundColor Yellow
          
          # Build LocalTesting WebApi first
          Write-Host "Building LocalTesting WebApi..." -ForegroundColor Yellow
          dotnet build LocalTesting/LocalTesting.WebApi/LocalTesting.WebApi.csproj --configuration Release
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to build LocalTesting WebApi"
          }
          Write-Host "‚úÖ LocalTesting WebApi built successfully" -ForegroundColor Green
          
          # Start Docker Compose services
          pwsh ./start-docker-compose-services.ps1 -TimeoutMinutes 8
          if ($LASTEXITCODE -ne 0) {
            throw "Failed to start Docker Compose services"
          }
          
          Write-Host "‚úÖ LocalTesting environment started successfully with Docker Compose" -ForegroundColor Green

      - name: Start LocalTesting API
        timeout-minutes: 5
        run: |
          Write-Host "üåê Starting LocalTesting WebAPI..." -ForegroundColor Green
          
          # Set environment variables for the API
          $env:KAFKA_BOOTSTRAP_SERVERS = "localhost:9092"
          $env:FLINK_JOBMANAGER_URL = "http://localhost:8081"
          $env:TEMPORAL_SERVER_URL = "localhost:7233"
          $env:ASPNETCORE_URLS = "http://localhost:5000"
          $env:ASPNETCORE_ENVIRONMENT = "Development"
          
          # Navigate to WebAPI directory
          Push-Location LocalTesting/LocalTesting.WebApi
          
          try {
            # Start the API as background process
            $apiProcess = Start-Process -FilePath "dotnet" -ArgumentList "run", "--configuration", "Release" -PassThru -RedirectStandardOutput "api_output.log" -RedirectStandardError "api_error.log" -NoNewWindow
            $global:ApiPID = $apiProcess.Id
            Write-Host "‚úÖ LocalTesting WebAPI started with PID: $global:ApiPID" -ForegroundColor Green
            
            # Wait for API to be ready
            Write-Host "Waiting for API to be ready..." -ForegroundColor Yellow
            $maxRetries = 30
            $retryCount = 0
            $apiReady = $false
            
            while ($retryCount -lt $maxRetries -and -not $apiReady) {
              try {
                $response = Invoke-WebRequest -Uri "http://localhost:5000/health" -TimeoutSec 5 -ErrorAction Stop
                if ($response.StatusCode -eq 200) {
                  Write-Host "‚úÖ LocalTesting API is accessible and healthy" -ForegroundColor Green
                  $apiReady = $true
                } else {
                  Write-Host "‚ö†Ô∏è API returned status: $($response.StatusCode)" -ForegroundColor Yellow
                }
              } catch {
                $retryCount++
                Write-Host "." -NoNewline -ForegroundColor Yellow
                Start-Sleep -Seconds 2
              }
            }
            
            if (-not $apiReady) {
              Write-Host ""
              throw "API failed to become ready after $($maxRetries * 2) seconds"
            }
          }
          finally {
            Pop-Location
          }

      - name: Execute Complex Logic Stress Test Business Flows
        timeout-minutes: 20
        run: |
          Write-Host "üß™ Executing Complex Logic Stress Test Business Flows..." -ForegroundColor Green
          Write-Host "This validates the actual business functionality with Docker Compose orchestration" -ForegroundColor Cyan
          
          $apiBase = "http://localhost:5000/api/ComplexLogicStressTest"
          $testResults = @()
          $overallSuccess = $true
          
          try {
            # Step 1: Setup Environment
            Write-Host "`nüöÄ Step 1: Setting up Docker Compose test environment..." -ForegroundColor Yellow
            $setupResponse = Invoke-RestMethod -Uri "$apiBase/step1/setup-environment" -Method POST -ContentType "application/json" -TimeoutSec 30
            Write-Host "‚úÖ Environment setup: $($setupResponse.Status)" -ForegroundColor Green
            Write-Host "   Services Health: $($setupResponse.Metrics | ConvertTo-Json -Depth 2)" -ForegroundColor Cyan
            $testResults += @{Step="1-Setup"; Status=$setupResponse.Status; Success=$true}
            
            # Step 2: Configure Security Tokens  
            Write-Host "`nüîë Step 2: Configuring security tokens..." -ForegroundColor Yellow
            $tokenConfig = 1000  # Smaller interval for faster testing
            $tokenResponse = Invoke-RestMethod -Uri "$apiBase/step2/configure-security-tokens" -Method POST -Body ($tokenConfig | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 30
            Write-Host "‚úÖ Token configuration: $($tokenResponse.Status)" -ForegroundColor Green
            Write-Host "   Renewal Interval: $($tokenResponse.TokenInfo.RenewalInterval) messages" -ForegroundColor Cyan
            $testResults += @{Step="2-Tokens"; Status=$tokenResponse.Status; Success=$true}
            
            # Step 3: Configure Backpressure
            Write-Host "`n‚ö° Step 3: Configuring lag-based backpressure..." -ForegroundColor Yellow
            $backpressureConfig = @{
              ConsumerGroup = "stress-test-group"
              LagThresholdSeconds = 5.0
              RateLimit = 1000.0
              BurstCapacity = 5000.0
            }
            $backpressureResponse = Invoke-RestMethod -Uri "$apiBase/step3/configure-backpressure" -Method POST -Body ($backpressureConfig | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 30
            Write-Host "‚úÖ Backpressure configuration: $($backpressureResponse.Status)" -ForegroundColor Green
            Write-Host "   Lag Threshold: $($backpressureResponse.Configuration.LagThresholdSeconds)s" -ForegroundColor Cyan
            $testResults += @{Step="3-Backpressure"; Status=$backpressureResponse.Status; Success=$true}
            
            # Step 4: Produce Messages (smaller batch for CI testing)
            Write-Host "`nüìù Step 4: Producing messages with correlation IDs..." -ForegroundColor Yellow
            $messageConfig = @{
              TestId = "ci-test-$(Get-Date -Format 'yyyyMMddHHmmss')"
              MessageCount = 5000  # 5K messages for faster CI testing with Docker Compose
            }
            $productionResponse = Invoke-RestMethod -Uri "$apiBase/step4/produce-messages" -Method POST -Body ($messageConfig | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 60
            Write-Host "‚úÖ Message production: $($productionResponse.Status)" -ForegroundColor Green
            Write-Host "   Messages: $($productionResponse.Metrics.messageCount.ToString('N0')), Throughput: $($productionResponse.Metrics.messagesPerSecond.ToString('F0')) msgs/sec" -ForegroundColor Cyan
            $testResults += @{Step="4-Production"; Status=$productionResponse.Status; Success=$true; MessageCount=$productionResponse.Metrics.messageCount}
            
            # Step 5: Start Flink Job
            Write-Host "`nüöÄ Step 5: Starting Flink streaming job..." -ForegroundColor Yellow
            $flinkConfig = @{
              ConsumerGroup = "stress-test-group"
              InputTopic = "complex-input"
              OutputTopic = "complex-output"
              EnableCorrelationTracking = $true
              BatchSize = 100
              Parallelism = 4
              CheckpointingInterval = 10000
            }
            $flinkResponse = Invoke-RestMethod -Uri "$apiBase/step5/start-flink-job" -Method POST -Body ($flinkConfig | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 45
            Write-Host "‚úÖ Flink job: $($flinkResponse.Status)" -ForegroundColor Green
            Write-Host "   Job ID: $($flinkResponse.JobId)" -ForegroundColor Cyan
            $testResults += @{Step="5-Flink"; Status=$flinkResponse.Status; Success=$true; JobId=$flinkResponse.JobId}
            
            # Step 6: Process Batches
            Write-Host "`nüîÑ Step 6: Processing message batches..." -ForegroundColor Yellow
            $batchConfig = @{
              TestId = $messageConfig.TestId
              BatchSize = 100
            }
            $batchResponse = Invoke-RestMethod -Uri "$apiBase/step6/process-batches" -Method POST -Body ($batchConfig | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 60
            Write-Host "‚úÖ Batch processing: $($batchResponse.Status)" -ForegroundColor Green
            Write-Host "   Batches: $($batchResponse.TotalBatches), Messages: $($batchResponse.TotalMessages.ToString('N0'))" -ForegroundColor Cyan
            $testResults += @{Step="6-Batches"; Status=$batchResponse.Status; Success=$true; TotalBatches=$batchResponse.TotalBatches}
            
            # Step 7: Verify Messages
            Write-Host "`nüîç Step 7: Verifying message processing..." -ForegroundColor Yellow
            $verificationConfig = @{
              TestId = $messageConfig.TestId
              TopCount = 10   # Smaller counts for CI
              LastCount = 10
            }
            $verificationResponse = Invoke-RestMethod -Uri "$apiBase/step7/verify-messages" -Method POST -Body ($verificationConfig | ConvertTo-Json) -ContentType "application/json" -TimeoutSec 30
            Write-Host "‚úÖ Message verification: $($verificationResponse.Status)" -ForegroundColor Green
            Write-Host "   Success Rate: $($verificationResponse.VerificationResult.SuccessRate.ToString('P1'))" -ForegroundColor Cyan
            $testResults += @{Step="7-Verification"; Status=$verificationResponse.Status; Success=$true; SuccessRate=$verificationResponse.VerificationResult.SuccessRate}
            
            # Test Status Monitoring
            Write-Host "`nüìä Testing stress test status monitoring..." -ForegroundColor Yellow
            $allTestsResponse = Invoke-RestMethod -Uri "$apiBase/test-status" -Method GET -TimeoutSec 15
            Write-Host "‚úÖ Active tests monitoring: $($allTestsResponse.Count) active tests" -ForegroundColor Green
            
          }
          catch {
            Write-Host "‚ùå Business flow test failed: $($_.Exception.Message)" -ForegroundColor Red
            Write-Host "Response details: $($_.Exception.Response | Out-String)" -ForegroundColor Yellow
            $testResults += @{Step="Error"; Status="Failed"; Success=$false; Error=$_.Exception.Message}
            $overallSuccess = $false
          }
          
          # Summary Report
          Write-Host "`nüìã Complex Logic Stress Test Business Flow Results (Docker Compose):" -ForegroundColor Green
          Write-Host "=" * 60 -ForegroundColor Green
          
          $successfulSteps = ($testResults | Where-Object { $_.Success -eq $true }).Count
          $totalSteps = $testResults.Count
          
          foreach ($result in $testResults) {
            $status = if ($result.Success) { "‚úÖ PASSED" } else { "‚ùå FAILED" }
            Write-Host "  $($result.Step): $status - $($result.Status)" -ForegroundColor $(if ($result.Success) { "Green" } else { "Red" })
          }
          
          Write-Host "=" * 60 -ForegroundColor Green
          Write-Host "Overall Result: $successfulSteps/$totalSteps steps passed" -ForegroundColor $(if ($overallSuccess) { "Green" } else { "Red" })
          
          if ($overallSuccess) {
            Write-Host "üéâ ALL BUSINESS FLOWS COMPLETED SUCCESSFULLY!" -ForegroundColor Green
            Write-Host "The LocalTesting environment successfully executed complex logic stress test scenarios with Docker Compose" -ForegroundColor Cyan
          } else {
            Write-Host "‚ùå SOME BUSINESS FLOWS FAILED" -ForegroundColor Red
            throw "Business flow validation failed - see test results above"
          }

      - name: Validate Docker Compose Environment Health and Performance
        run: |
          Write-Host "üîç Final validation of Docker Compose environment health and performance..." -ForegroundColor Green
          
          # Show all running containers
          Write-Host "All running containers:" -ForegroundColor Yellow
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          
          # Show container resource usage
          Write-Host "`nContainer resource usage:" -ForegroundColor Yellow
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
          
          # Check Docker system info
          Write-Host "`nDocker system info:" -ForegroundColor Yellow
          docker system info --format "{{.ServerVersion}}"
          
          Write-Host "‚úÖ LocalTesting environment validation completed successfully!" -ForegroundColor Green
          Write-Host "üéâ Both infrastructure containers AND business flows are working correctly with Docker Compose!" -ForegroundColor Green

      - name: Summary Report
        run: |
          Write-Host "üìã LocalTesting Workflow Summary Report" -ForegroundColor Green
          Write-Host "=" * 50 -ForegroundColor Green
          Write-Host "‚úÖ Docker Compose environment startup: SUCCESS" -ForegroundColor Green
          Write-Host "‚úÖ Infrastructure container validation: SUCCESS" -ForegroundColor Green  
          Write-Host "‚úÖ Business flow execution: SUCCESS" -ForegroundColor Green
          Write-Host "‚úÖ Complex Logic Stress Test API: FUNCTIONAL" -ForegroundColor Green
          Write-Host "=" * 50 -ForegroundColor Green
          Write-Host "üéØ LocalTesting environment is production-ready for development and testing!" -ForegroundColor Green
          Write-Host "üîß CI uses Docker Compose, developers can still use Aspire locally" -ForegroundColor Cyan

      - name: Cleanup Docker Compose Environment
        if: always()
        run: |
          Write-Host "üßπ Cleaning up Docker Compose environment..." -ForegroundColor Green
          
          # Stop the LocalTesting API process if it's still running
          try {
            if ($global:ApiPID) {
              Write-Host "Stopping LocalTesting API process (PID: $global:ApiPID)..." -ForegroundColor Yellow
              Stop-Process -Id $global:ApiPID -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
            }
          }
          catch {
            Write-Host "LocalTesting API process may have already stopped" -ForegroundColor Yellow
          }
          
          # Stop any remaining dotnet processes that might be running from the LocalTesting API
          try {
            $dotnetProcesses = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*LocalTesting.WebApi*" }
            if ($dotnetProcesses) {
              Write-Host "Stopping remaining LocalTesting API processes..." -ForegroundColor Yellow
              $dotnetProcesses | Stop-Process -Force -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
            }
          }
          catch {
            Write-Host "No additional LocalTesting API processes to stop" -ForegroundColor Yellow
          }
          
          # Stop Docker Compose services using the script
          pwsh ./start-docker-compose-services.ps1 -StopOnly
          
          # Clean up any dangling containers
          Write-Host "Cleaning up containers..." -ForegroundColor Yellow
          docker container prune -f 2>$null
          
          Write-Host "‚úÖ Cleanup completed!" -ForegroundColor Green

      - name: Upload LocalTesting test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: local-testing-results
          path: |
            **/*.log
            **/*.txt
            LocalTesting/**/bin/Release/net8.0/**
          retention-days: 7