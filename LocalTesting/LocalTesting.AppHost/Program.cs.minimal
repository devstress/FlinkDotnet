using Aspire.Hosting;
using System.Net;
using System.Net.Sockets;

// Force IPv4 usage globally - this must be set before any networking operations
Environment.SetEnvironmentVariable("DOTNET_SYSTEM_NET_DISABLEIPV6", "true");
Environment.SetEnvironmentVariable("ASPIRE_PREFER_IPV4", "true");
Environment.SetEnvironmentVariable("DOCKER_DEFAULT_PLATFORM", "linux/amd64");

// Force the system to use IPv4 only
if (Socket.OSSupportsIPv6)
{
    // Disable IPv6 support at the .NET level
    AppContext.SetSwitch("System.Net.DisableIPv6", true);
}

var builder = DistributedApplication.CreateBuilder(args);

// Start with minimal configuration - just Redis and the API to test basic functionality
var redis = builder.AddRedis("redis")
    .WithEnvironment("REDIS_MAXMEMORY", "256mb")
    .WithEnvironment("REDIS_MAXMEMORY_POLICY", "allkeys-lru");

// LocalTesting Web API with IPv4 configuration - minimal for testing
var localTestingApi = builder.AddProject("localtesting-webapi", "../LocalTesting.WebApi/LocalTesting.WebApi.csproj")
    .WithReference(redis)
    .WithEnvironment("ASPNETCORE_URLS", "http://0.0.0.0:5000")
    .WithEnvironment("DOTNET_SYSTEM_NET_DISABLEIPV6", "true")
    .WithHttpEndpoint(port: 5000, name: "http");

builder.Build().Run();