// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace FlinkDotNet.Aspire.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "complex_logic_test")]
    [Xunit.TraitAttribute("Category", "integration_test")]
    public partial class ComplexLogicStressTest_AdvancedIntegrationWithCorrelationIDAndHTTPProcessingFeature : object, Xunit.IClassFixture<ComplexLogicStressTest_AdvancedIntegrationWithCorrelationIDAndHTTPProcessingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "complex_logic_test",
                "integration_test"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Complex Logic Stress Test - Advanced Integration with Correlation ID and HTTP Pro" +
                "cessing", "  As a Flink.NET enterprise user\n  I want to process 1 million messages with corr" +
                "elation ID tracking, security token management, batch HTTP processing, and respo" +
                "nse verification\n  So that I can validate complex real-world enterprise streamin" +
                "g scenarios", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ComplexLogicStressTest.feature"
#line hidden
        
        public ComplexLogicStressTest_AdvancedIntegrationWithCorrelationIDAndHTTPProcessingFeature(ComplexLogicStressTest_AdvancedIntegrationWithCorrelationIDAndHTTPProcessingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
  #line hidden
#line 8
    await testRunner.GivenAsync("the Aspire test environment is running with all required services", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("the HTTP endpoint is available for batch processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
    await testRunner.AndAsync("the security token service is initialized", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
    await testRunner.AndAsync("logical queues are configured with backpressure handling", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
    await testRunner.AndAsync("correlation ID tracking system is ready", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Process 1 Million Messages with Complete Integration Pipeline")]
        [Xunit.TraitAttribute("FeatureTitle", "Complex Logic Stress Test - Advanced Integration with Correlation ID and HTTP Pro" +
            "cessing")]
        [Xunit.TraitAttribute("Description", "Process 1 Million Messages with Complete Integration Pipeline")]
        [Xunit.TraitAttribute("Category", "complex_logic")]
        [Xunit.TraitAttribute("Category", "correlation_id_test")]
        [Xunit.TraitAttribute("Category", "security_token_test")]
        [Xunit.TraitAttribute("Category", "http_batch_test")]
        public async global::System.Threading.Tasks.Task Process1MillionMessagesWithCompleteIntegrationPipeline()
        {
            string[] tagsOfScenario = new string[] {
                    "complex_logic",
                    "correlation_id_test",
                    "security_token_test",
                    "http_batch_test"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Process 1 Million Messages with Complete Integration Pipeline", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await this.FeatureBackgroundAsync();
#line hidden
#line 16
    await testRunner.GivenAsync("I have a logical queue \"complex-input\" configured with backpressure handling", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
    await testRunner.AndAsync("I have a logical queue \"complex-output\" for response processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("I have a security token service running with 10000 message renewal interval", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.AndAsync("I have an HTTP endpoint running on Aspire Test infrastructure at \"/api/batch/proc" +
                        "ess\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
    await testRunner.AndAsync("correlation ID tracking is initialized for 1000000 messages", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.WhenAsync("I produce 1000000 messages with unique correlation IDs to the logical queue", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
    await testRunner.AndAsync("I subscribe to correlation IDs for response matching", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table47 = new global::Reqnroll.Table(new string[] {
                            "Step",
                            "Operation",
                            "Configuration"});
                table47.AddRow(new string[] {
                            "1",
                            "KafkaSource",
                            "topic=complex-input, consumerGroup=complex-logic-group"});
                table47.AddRow(new string[] {
                            "2",
                            "CorrelationIdSubscription",
                            "track all correlation IDs for message mapping"});
                table47.AddRow(new string[] {
                            "3",
                            "SecurityTokenManager",
                            "renew token every 10000 messages with thread sync"});
                table47.AddRow(new string[] {
                            "4",
                            "BatchProcessor",
                            "group 100 messages per batch for HTTP processing"});
                table47.AddRow(new string[] {
                            "5",
                            "HttpEndpointProcessor",
                            "send batches to /api/batch/process endpoint for background mapping"});
                table47.AddRow(new string[] {
                            "6",
                            "FlinkMessagePuller",
                            "use Flink to pull processed messages from endpoint memory"});
                table47.AddRow(new string[] {
                            "7",
                            "SendingIdAssigner",
                            "assign SendingID property to each pulled message"});
                table47.AddRow(new string[] {
                            "8",
                            "CorrelationMatcher",
                            "match pulled messages to original correlation IDs"});
                table47.AddRow(new string[] {
                            "9",
                            "KafkaSink",
                            "topic=complex-output, maintain correlation tracking"});
#line 23
    await testRunner.AndAsync("I start the Flink streaming job with the complex logic pipeline:", ((string)(null)), table47, "And ");
#line hidden
#line 34
    await testRunner.ThenAsync("all 1000000 messages should be processed with correlation ID matching", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
    await testRunner.AndAsync("security tokens should be renewed exactly 100 times during processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.AndAsync("all 10000 batches should be successfully sent to the HTTP endpoint for background" +
                        " processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
    await testRunner.AndAsync("Flink should successfully pull all processed messages from the endpoint memory", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
    await testRunner.AndAsync("the SendingID property should be assigned to all 1000000 pulled messages", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.AndAsync("all pulled messages should be matched to their original correlation IDs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
    await testRunner.AndAsync("all response messages should be written to the output logical queue", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table48 = new global::Reqnroll.Table(new string[] {
                            "MessageID",
                            "Content",
                            "Headers"});
                table48.AddRow(new string[] {
                            "1",
                            "Complex logic msg 1: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000001; batch.number=1"});
                table48.AddRow(new string[] {
                            "2",
                            "Complex logic msg 2: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000002; batch.number=1"});
                table48.AddRow(new string[] {
                            "3",
                            "Complex logic msg 3: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000003; batch.number=1"});
                table48.AddRow(new string[] {
                            "4",
                            "Complex logic msg 4: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000004; batch.number=1"});
                table48.AddRow(new string[] {
                            "5",
                            "Complex logic msg 5: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000005; batch.number=1"});
                table48.AddRow(new string[] {
                            "6",
                            "Complex logic msg 6: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000006; batch.number=1"});
                table48.AddRow(new string[] {
                            "7",
                            "Complex logic msg 7: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000007; batch.number=1"});
                table48.AddRow(new string[] {
                            "8",
                            "Complex logic msg 8: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000008; batch.number=1"});
                table48.AddRow(new string[] {
                            "9",
                            "Complex logic msg 9: Correlation tracked, security token renewed, HTTP batch proc" +
                                "essed",
                            "kafka.topic=complex-input; correlation.id=corr-000009; batch.number=1"});
                table48.AddRow(new string[] {
                            "10",
                            "Complex logic msg 10: Correlation tracked, security token renewed, HTTP batch pro" +
                                "cessed",
                            "kafka.topic=complex-input; correlation.id=corr-000010; batch.number=1"});
#line 41
    await testRunner.AndAsync("I can verify the top 10 processed messages with their correlation data:", ((string)(null)), table48, "And ");
#line hidden
                global::Reqnroll.Table table49 = new global::Reqnroll.Table(new string[] {
                            "MessageID",
                            "Content",
                            "Headers"});
                table49.AddRow(new string[] {
                            "999991",
                            "Complex logic msg 999991: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999991; batch.number=10000"});
                table49.AddRow(new string[] {
                            "999992",
                            "Complex logic msg 999992: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999992; batch.number=10000"});
                table49.AddRow(new string[] {
                            "999993",
                            "Complex logic msg 999993: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999993; batch.number=10000"});
                table49.AddRow(new string[] {
                            "999994",
                            "Complex logic msg 999994: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999994; batch.number=10000"});
                table49.AddRow(new string[] {
                            "999995",
                            "Complex logic msg 999995: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999995; batch.number=10000"});
                table49.AddRow(new string[] {
                            "999996",
                            "Complex logic msg 999996: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999996; batch.number=10000"});
                table49.AddRow(new string[] {
                            "999997",
                            "Complex logic msg 999997: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999997; batch.number=10000"});
                table49.AddRow(new string[] {
                            "999998",
                            "Complex logic msg 999998: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999998; batch.number=10000"});
                table49.AddRow(new string[] {
                            "999999",
                            "Complex logic msg 999999: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-999999; batch.number=10000"});
                table49.AddRow(new string[] {
                            "1000000",
                            "Complex logic msg 1000000: Final correlation match with complete HTTP processing",
                            "kafka.topic=complex-output; correlation.id=corr-1000000; batch.number=10000"});
#line 53
    await testRunner.AndAsync("I can verify the last 10 processed messages with their correlation data:", ((string)(null)), table49, "And ");
#line hidden
#line 65
    await testRunner.AndAsync("the correlation ID matching should show 100% success rate", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle Backpressure in Logical Queue Processing")]
        [Xunit.TraitAttribute("FeatureTitle", "Complex Logic Stress Test - Advanced Integration with Correlation ID and HTTP Pro" +
            "cessing")]
        [Xunit.TraitAttribute("Description", "Handle Backpressure in Logical Queue Processing")]
        [Xunit.TraitAttribute("Category", "complex_logic")]
        [Xunit.TraitAttribute("Category", "backpressure_handling")]
        [Xunit.TraitAttribute("Category", "logical_queue_test")]
        public async global::System.Threading.Tasks.Task HandleBackpressureInLogicalQueueProcessing()
        {
            string[] tagsOfScenario = new string[] {
                    "complex_logic",
                    "backpressure_handling",
                    "logical_queue_test"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle Backpressure in Logical Queue Processing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await this.FeatureBackgroundAsync();
#line hidden
#line 69
    await testRunner.GivenAsync("the logical queue \"complex-input\" is configured with backpressure thresholds", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
    await testRunner.AndAsync("the processing capacity is limited to simulate backpressure conditions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
    await testRunner.WhenAsync("I produce messages at a rate exceeding the processing capacity", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
    await testRunner.AndAsync("the logical queue approaches its configured limits", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
    await testRunner.ThenAsync("the system should apply backpressure automatically", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 74
    await testRunner.AndAsync("message production should slow down to match consumption rate", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
    await testRunner.AndAsync("no messages should be lost during backpressure application", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
    await testRunner.AndAsync("queue depth should remain within configured limits", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
    await testRunner.AndAsync("processing should continue smoothly after backpressure is relieved", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate Complete Integration Performance")]
        [Xunit.TraitAttribute("FeatureTitle", "Complex Logic Stress Test - Advanced Integration with Correlation ID and HTTP Pro" +
            "cessing")]
        [Xunit.TraitAttribute("Description", "Validate Complete Integration Performance")]
        [Xunit.TraitAttribute("Category", "complex_logic")]
        [Xunit.TraitAttribute("Category", "performance_verification")]
        [Xunit.TraitAttribute("Category", "integration_validation")]
        public async global::System.Threading.Tasks.Task ValidateCompleteIntegrationPerformance()
        {
            string[] tagsOfScenario = new string[] {
                    "complex_logic",
                    "performance_verification",
                    "integration_validation"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate Complete Integration Performance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await this.FeatureBackgroundAsync();
#line hidden
#line 83
    await testRunner.GivenAsync("the complete complex logic pipeline is configured and running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 84
    await testRunner.WhenAsync("1000000 messages are processed through all integration steps", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 85
    await testRunner.ThenAsync("the total processing time should be less than 5 minutes", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 86
    await testRunner.AndAsync("memory usage should remain below 4GB throughout processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 87
    await testRunner.AndAsync("CPU utilization should remain stable without spikes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
    await testRunner.AndAsync("no errors should occur in any processing stage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 89
    await testRunner.AndAsync("all messages should maintain data integrity through the pipeline", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 90
    await testRunner.AndAsync("the system should gracefully handle any temporary service disruptions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify Top and Last 100 Messages for Data Integrity")]
        [Xunit.TraitAttribute("FeatureTitle", "Complex Logic Stress Test - Advanced Integration with Correlation ID and HTTP Pro" +
            "cessing")]
        [Xunit.TraitAttribute("Description", "Verify Top and Last 100 Messages for Data Integrity")]
        [Xunit.TraitAttribute("Category", "complex_logic")]
        [Xunit.TraitAttribute("Category", "message_verification")]
        [Xunit.TraitAttribute("Category", "data_integrity")]
        public async global::System.Threading.Tasks.Task VerifyTopAndLast100MessagesForDataIntegrity()
        {
            string[] tagsOfScenario = new string[] {
                    "complex_logic",
                    "message_verification",
                    "data_integrity"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify Top and Last 100 Messages for Data Integrity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await this.FeatureBackgroundAsync();
#line hidden
#line 94
    await testRunner.GivenAsync("1000000 messages have been processed through the complete pipeline", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 95
    await testRunner.AndAsync("correlation ID matching has been completed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
    await testRunner.AndAsync("all response messages have been written to the output queue", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
    await testRunner.WhenAsync("I retrieve the first 100 processed messages from the output queue", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 98
    await testRunner.ThenAsync("I should see messages with IDs 1 through 100 in sequential order", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 99
    await testRunner.AndAsync("each message should have the correct correlation ID (corr-000001 through corr-000" +
                        "100)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 100
    await testRunner.AndAsync("each message should have a valid SendingID assigned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 101
    await testRunner.AndAsync("each message should belong to batch number 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 102
    await testRunner.WhenAsync("I retrieve the last 100 processed messages from the output queue", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 103
    await testRunner.ThenAsync("I should see messages with IDs 999901 through 1000000 in sequential order", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 104
    await testRunner.AndAsync("each message should have the correct correlation ID (corr-999901 through corr-100" +
                        "0000)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 105
    await testRunner.AndAsync("each message should have a valid SendingID assigned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 106
    await testRunner.AndAsync("each message should belong to batch number 10000", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 107
    await testRunner.AndAsync("all messages should have consistent data structure and formatting", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ComplexLogicStressTest_AdvancedIntegrationWithCorrelationIDAndHTTPProcessingFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ComplexLogicStressTest_AdvancedIntegrationWithCorrelationIDAndHTTPProcessingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
