// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/jobmanager_internal.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FlinkDotNet.Proto.Internal {
  /// <summary>
  /// ----- JobManagerInternalService and related messages (mostly from feature branch) -----
  /// </summary>
  public static partial class JobManagerInternalService
  {
    static readonly string __ServiceName = "FlinkDotNet.Proto.JobManagerInternalService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.SubmitJobRequest> __Marshaller_FlinkDotNet_Proto_SubmitJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.SubmitJobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.SubmitJobReply> __Marshaller_FlinkDotNet_Proto_SubmitJobReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.SubmitJobReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest> __Marshaller_FlinkDotNet_Proto_ReportStateCompletionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply> __Marshaller_FlinkDotNet_Proto_ReportStateCompletionReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest> __Marshaller_FlinkDotNet_Proto_RequestCheckpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.RequestCheckpointReply> __Marshaller_FlinkDotNet_Proto_RequestCheckpointReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.RequestCheckpointReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest> __Marshaller_FlinkDotNet_Proto_RequestRecoveryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.RequestRecoveryReply> __Marshaller_FlinkDotNet_Proto_RequestRecoveryReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.RequestRecoveryReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest> __Marshaller_FlinkDotNet_Proto_ReportFailedCheckpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse> __Marshaller_FlinkDotNet_Proto_ReportFailedCheckpointResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest> __Marshaller_FlinkDotNet_Proto_ReportTaskStartupFailureRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse> __Marshaller_FlinkDotNet_Proto_ReportTaskStartupFailureResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest> __Marshaller_FlinkDotNet_Proto_JobManagerHeartbeatRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply> __Marshaller_FlinkDotNet_Proto_JobManagerHeartbeatReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.SubmitJobRequest, global::FlinkDotNet.Proto.Internal.SubmitJobReply> __Method_SubmitJob = new grpc::Method<global::FlinkDotNet.Proto.Internal.SubmitJobRequest, global::FlinkDotNet.Proto.Internal.SubmitJobReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitJob",
        __Marshaller_FlinkDotNet_Proto_SubmitJobRequest,
        __Marshaller_FlinkDotNet_Proto_SubmitJobReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest, global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply> __Method_ReportStateCompletion = new grpc::Method<global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest, global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportStateCompletion",
        __Marshaller_FlinkDotNet_Proto_ReportStateCompletionRequest,
        __Marshaller_FlinkDotNet_Proto_ReportStateCompletionReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest, global::FlinkDotNet.Proto.Internal.RequestCheckpointReply> __Method_RequestCheckpoint = new grpc::Method<global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest, global::FlinkDotNet.Proto.Internal.RequestCheckpointReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestCheckpoint",
        __Marshaller_FlinkDotNet_Proto_RequestCheckpointRequest,
        __Marshaller_FlinkDotNet_Proto_RequestCheckpointReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest, global::FlinkDotNet.Proto.Internal.RequestRecoveryReply> __Method_RequestRecovery = new grpc::Method<global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest, global::FlinkDotNet.Proto.Internal.RequestRecoveryReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestRecovery",
        __Marshaller_FlinkDotNet_Proto_RequestRecoveryRequest,
        __Marshaller_FlinkDotNet_Proto_RequestRecoveryReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest, global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse> __Method_ReportFailedCheckpoint = new grpc::Method<global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest, global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportFailedCheckpoint",
        __Marshaller_FlinkDotNet_Proto_ReportFailedCheckpointRequest,
        __Marshaller_FlinkDotNet_Proto_ReportFailedCheckpointResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest, global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse> __Method_ReportTaskStartupFailure = new grpc::Method<global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest, global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportTaskStartupFailure",
        __Marshaller_FlinkDotNet_Proto_ReportTaskStartupFailureRequest,
        __Marshaller_FlinkDotNet_Proto_ReportTaskStartupFailureResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest, global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply> __Method_Heartbeat = new grpc::Method<global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest, global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Heartbeat",
        __Marshaller_FlinkDotNet_Proto_JobManagerHeartbeatRequest,
        __Marshaller_FlinkDotNet_Proto_JobManagerHeartbeatReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FlinkDotNet.Proto.Internal.JobmanagerInternalReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of JobManagerInternalService</summary>
    [grpc::BindServiceMethod(typeof(JobManagerInternalService), "BindService")]
    public abstract partial class JobManagerInternalServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.SubmitJobReply> SubmitJob(global::FlinkDotNet.Proto.Internal.SubmitJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply> ReportStateCompletion(global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.RequestCheckpointReply> RequestCheckpoint(global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.RequestRecoveryReply> RequestRecovery(global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse> ReportFailedCheckpoint(global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse> ReportTaskStartupFailure(global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Heartbeat was part of this service in one version, but seems to be part of TaskManagerRegistration in another.
      /// Let's assume TaskManagerRegistration.SendHeartbeat is the one to keep, and JobManagerInternalService.Heartbeat might be deprecated or for a different purpose.
      /// For this merge, I will OMIT JobManagerInternalService.Heartbeat if TaskManagerRegistration.SendHeartbeat exists and is more complete.
      /// The provided diff for JobManagerController uses TaskManagerTracker, which is updated by TaskManagerRegistrationService.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply> Heartbeat(global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for JobManagerInternalService</summary>
    public partial class JobManagerInternalServiceClient : grpc::ClientBase<JobManagerInternalServiceClient>
    {
      /// <summary>Creates a new client for JobManagerInternalService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public JobManagerInternalServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for JobManagerInternalService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public JobManagerInternalServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected JobManagerInternalServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected JobManagerInternalServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.SubmitJobReply SubmitJob(global::FlinkDotNet.Proto.Internal.SubmitJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.SubmitJobReply SubmitJob(global::FlinkDotNet.Proto.Internal.SubmitJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitJob, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.SubmitJobReply> SubmitJobAsync(global::FlinkDotNet.Proto.Internal.SubmitJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.SubmitJobReply> SubmitJobAsync(global::FlinkDotNet.Proto.Internal.SubmitJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitJob, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply ReportStateCompletion(global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportStateCompletion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply ReportStateCompletion(global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportStateCompletion, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply> ReportStateCompletionAsync(global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportStateCompletionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply> ReportStateCompletionAsync(global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportStateCompletion, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.RequestCheckpointReply RequestCheckpoint(global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestCheckpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.RequestCheckpointReply RequestCheckpoint(global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestCheckpoint, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.RequestCheckpointReply> RequestCheckpointAsync(global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestCheckpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.RequestCheckpointReply> RequestCheckpointAsync(global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestCheckpoint, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.RequestRecoveryReply RequestRecovery(global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestRecovery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.RequestRecoveryReply RequestRecovery(global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestRecovery, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.RequestRecoveryReply> RequestRecoveryAsync(global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestRecoveryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.RequestRecoveryReply> RequestRecoveryAsync(global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestRecovery, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse ReportFailedCheckpoint(global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportFailedCheckpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse ReportFailedCheckpoint(global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportFailedCheckpoint, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse> ReportFailedCheckpointAsync(global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportFailedCheckpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse> ReportFailedCheckpointAsync(global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportFailedCheckpoint, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse ReportTaskStartupFailure(global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportTaskStartupFailure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse ReportTaskStartupFailure(global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportTaskStartupFailure, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse> ReportTaskStartupFailureAsync(global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportTaskStartupFailureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse> ReportTaskStartupFailureAsync(global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportTaskStartupFailure, null, options, request);
      }
      /// <summary>
      /// Heartbeat was part of this service in one version, but seems to be part of TaskManagerRegistration in another.
      /// Let's assume TaskManagerRegistration.SendHeartbeat is the one to keep, and JobManagerInternalService.Heartbeat might be deprecated or for a different purpose.
      /// For this merge, I will OMIT JobManagerInternalService.Heartbeat if TaskManagerRegistration.SendHeartbeat exists and is more complete.
      /// The provided diff for JobManagerController uses TaskManagerTracker, which is updated by TaskManagerRegistrationService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply Heartbeat(global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Heartbeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Heartbeat was part of this service in one version, but seems to be part of TaskManagerRegistration in another.
      /// Let's assume TaskManagerRegistration.SendHeartbeat is the one to keep, and JobManagerInternalService.Heartbeat might be deprecated or for a different purpose.
      /// For this merge, I will OMIT JobManagerInternalService.Heartbeat if TaskManagerRegistration.SendHeartbeat exists and is more complete.
      /// The provided diff for JobManagerController uses TaskManagerTracker, which is updated by TaskManagerRegistrationService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply Heartbeat(global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Heartbeat, null, options, request);
      }
      /// <summary>
      /// Heartbeat was part of this service in one version, but seems to be part of TaskManagerRegistration in another.
      /// Let's assume TaskManagerRegistration.SendHeartbeat is the one to keep, and JobManagerInternalService.Heartbeat might be deprecated or for a different purpose.
      /// For this merge, I will OMIT JobManagerInternalService.Heartbeat if TaskManagerRegistration.SendHeartbeat exists and is more complete.
      /// The provided diff for JobManagerController uses TaskManagerTracker, which is updated by TaskManagerRegistrationService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply> HeartbeatAsync(global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HeartbeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Heartbeat was part of this service in one version, but seems to be part of TaskManagerRegistration in another.
      /// Let's assume TaskManagerRegistration.SendHeartbeat is the one to keep, and JobManagerInternalService.Heartbeat might be deprecated or for a different purpose.
      /// For this merge, I will OMIT JobManagerInternalService.Heartbeat if TaskManagerRegistration.SendHeartbeat exists and is more complete.
      /// The provided diff for JobManagerController uses TaskManagerTracker, which is updated by TaskManagerRegistrationService.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply> HeartbeatAsync(global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Heartbeat, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override JobManagerInternalServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new JobManagerInternalServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(JobManagerInternalServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubmitJob, serviceImpl.SubmitJob)
          .AddMethod(__Method_ReportStateCompletion, serviceImpl.ReportStateCompletion)
          .AddMethod(__Method_RequestCheckpoint, serviceImpl.RequestCheckpoint)
          .AddMethod(__Method_RequestRecovery, serviceImpl.RequestRecovery)
          .AddMethod(__Method_ReportFailedCheckpoint, serviceImpl.ReportFailedCheckpoint)
          .AddMethod(__Method_ReportTaskStartupFailure, serviceImpl.ReportTaskStartupFailure)
          .AddMethod(__Method_Heartbeat, serviceImpl.Heartbeat).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, JobManagerInternalServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubmitJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.SubmitJobRequest, global::FlinkDotNet.Proto.Internal.SubmitJobReply>(serviceImpl.SubmitJob));
      serviceBinder.AddMethod(__Method_ReportStateCompletion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.ReportStateCompletionRequest, global::FlinkDotNet.Proto.Internal.ReportStateCompletionReply>(serviceImpl.ReportStateCompletion));
      serviceBinder.AddMethod(__Method_RequestCheckpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.RequestCheckpointRequest, global::FlinkDotNet.Proto.Internal.RequestCheckpointReply>(serviceImpl.RequestCheckpoint));
      serviceBinder.AddMethod(__Method_RequestRecovery, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.RequestRecoveryRequest, global::FlinkDotNet.Proto.Internal.RequestRecoveryReply>(serviceImpl.RequestRecovery));
      serviceBinder.AddMethod(__Method_ReportFailedCheckpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointRequest, global::FlinkDotNet.Proto.Internal.ReportFailedCheckpointResponse>(serviceImpl.ReportFailedCheckpoint));
      serviceBinder.AddMethod(__Method_ReportTaskStartupFailure, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureRequest, global::FlinkDotNet.Proto.Internal.ReportTaskStartupFailureResponse>(serviceImpl.ReportTaskStartupFailure));
      serviceBinder.AddMethod(__Method_Heartbeat, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatRequest, global::FlinkDotNet.Proto.Internal.JobManagerHeartbeatReply>(serviceImpl.Heartbeat));
    }

  }
  /// <summary>
  /// ----- TaskManagerRegistration Service and related messages -----
  /// (Combines elements from both, especially HeartbeatRequest)
  /// </summary>
  public static partial class TaskManagerRegistration
  {
    static readonly string __ServiceName = "FlinkDotNet.Proto.TaskManagerRegistration";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest> __Marshaller_FlinkDotNet_Proto_RegisterTaskManagerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse> __Marshaller_FlinkDotNet_Proto_RegisterTaskManagerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.HeartbeatRequest> __Marshaller_FlinkDotNet_Proto_HeartbeatRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.HeartbeatRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.HeartbeatResponse> __Marshaller_FlinkDotNet_Proto_HeartbeatResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.HeartbeatResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest> __Marshaller_FlinkDotNet_Proto_AcknowledgeCheckpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse> __Marshaller_FlinkDotNet_Proto_AcknowledgeCheckpointResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest, global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse> __Method_RegisterTaskManager = new grpc::Method<global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest, global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterTaskManager",
        __Marshaller_FlinkDotNet_Proto_RegisterTaskManagerRequest,
        __Marshaller_FlinkDotNet_Proto_RegisterTaskManagerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.HeartbeatRequest, global::FlinkDotNet.Proto.Internal.HeartbeatResponse> __Method_SendHeartbeat = new grpc::Method<global::FlinkDotNet.Proto.Internal.HeartbeatRequest, global::FlinkDotNet.Proto.Internal.HeartbeatResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendHeartbeat",
        __Marshaller_FlinkDotNet_Proto_HeartbeatRequest,
        __Marshaller_FlinkDotNet_Proto_HeartbeatResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest, global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse> __Method_AcknowledgeCheckpoint = new grpc::Method<global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest, global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcknowledgeCheckpoint",
        __Marshaller_FlinkDotNet_Proto_AcknowledgeCheckpointRequest,
        __Marshaller_FlinkDotNet_Proto_AcknowledgeCheckpointResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FlinkDotNet.Proto.Internal.JobmanagerInternalReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of TaskManagerRegistration</summary>
    [grpc::BindServiceMethod(typeof(TaskManagerRegistration), "BindService")]
    public abstract partial class TaskManagerRegistrationBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse> RegisterTaskManager(global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is the primary heartbeat
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.HeartbeatResponse> SendHeartbeat(global::FlinkDotNet.Proto.Internal.HeartbeatRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse> AcknowledgeCheckpoint(global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TaskManagerRegistration</summary>
    public partial class TaskManagerRegistrationClient : grpc::ClientBase<TaskManagerRegistrationClient>
    {
      /// <summary>Creates a new client for TaskManagerRegistration</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TaskManagerRegistrationClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TaskManagerRegistration that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TaskManagerRegistrationClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TaskManagerRegistrationClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TaskManagerRegistrationClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse RegisterTaskManager(global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterTaskManager(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse RegisterTaskManager(global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterTaskManager, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse> RegisterTaskManagerAsync(global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterTaskManagerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse> RegisterTaskManagerAsync(global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterTaskManager, null, options, request);
      }
      /// <summary>
      /// This is the primary heartbeat
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.HeartbeatResponse SendHeartbeat(global::FlinkDotNet.Proto.Internal.HeartbeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendHeartbeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is the primary heartbeat
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.HeartbeatResponse SendHeartbeat(global::FlinkDotNet.Proto.Internal.HeartbeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendHeartbeat, null, options, request);
      }
      /// <summary>
      /// This is the primary heartbeat
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.HeartbeatResponse> SendHeartbeatAsync(global::FlinkDotNet.Proto.Internal.HeartbeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendHeartbeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is the primary heartbeat
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.HeartbeatResponse> SendHeartbeatAsync(global::FlinkDotNet.Proto.Internal.HeartbeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendHeartbeat, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse AcknowledgeCheckpoint(global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeCheckpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse AcknowledgeCheckpoint(global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcknowledgeCheckpoint, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse> AcknowledgeCheckpointAsync(global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeCheckpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse> AcknowledgeCheckpointAsync(global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcknowledgeCheckpoint, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TaskManagerRegistrationClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TaskManagerRegistrationClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TaskManagerRegistrationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterTaskManager, serviceImpl.RegisterTaskManager)
          .AddMethod(__Method_SendHeartbeat, serviceImpl.SendHeartbeat)
          .AddMethod(__Method_AcknowledgeCheckpoint, serviceImpl.AcknowledgeCheckpoint).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TaskManagerRegistrationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterTaskManager, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.RegisterTaskManagerRequest, global::FlinkDotNet.Proto.Internal.RegisterTaskManagerResponse>(serviceImpl.RegisterTaskManager));
      serviceBinder.AddMethod(__Method_SendHeartbeat, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.HeartbeatRequest, global::FlinkDotNet.Proto.Internal.HeartbeatResponse>(serviceImpl.SendHeartbeat));
      serviceBinder.AddMethod(__Method_AcknowledgeCheckpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointRequest, global::FlinkDotNet.Proto.Internal.AcknowledgeCheckpointResponse>(serviceImpl.AcknowledgeCheckpoint));
    }

  }
  /// <summary>
  /// TM hosts this, JM calls it
  /// </summary>
  public static partial class TaskManagerCheckpointing
  {
    static readonly string __ServiceName = "FlinkDotNet.Proto.TaskManagerCheckpointing";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest> __Marshaller_FlinkDotNet_Proto_TriggerCheckpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse> __Marshaller_FlinkDotNet_Proto_TriggerCheckpointResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest, global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse> __Method_TriggerTaskCheckpoint = new grpc::Method<global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest, global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TriggerTaskCheckpoint",
        __Marshaller_FlinkDotNet_Proto_TriggerCheckpointRequest,
        __Marshaller_FlinkDotNet_Proto_TriggerCheckpointResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FlinkDotNet.Proto.Internal.JobmanagerInternalReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of TaskManagerCheckpointing</summary>
    [grpc::BindServiceMethod(typeof(TaskManagerCheckpointing), "BindService")]
    public abstract partial class TaskManagerCheckpointingBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse> TriggerTaskCheckpoint(global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TaskManagerCheckpointing</summary>
    public partial class TaskManagerCheckpointingClient : grpc::ClientBase<TaskManagerCheckpointingClient>
    {
      /// <summary>Creates a new client for TaskManagerCheckpointing</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TaskManagerCheckpointingClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TaskManagerCheckpointing that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TaskManagerCheckpointingClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TaskManagerCheckpointingClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TaskManagerCheckpointingClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse TriggerTaskCheckpoint(global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerTaskCheckpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse TriggerTaskCheckpoint(global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TriggerTaskCheckpoint, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse> TriggerTaskCheckpointAsync(global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TriggerTaskCheckpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse> TriggerTaskCheckpointAsync(global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TriggerTaskCheckpoint, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TaskManagerCheckpointingClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TaskManagerCheckpointingClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TaskManagerCheckpointingBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_TriggerTaskCheckpoint, serviceImpl.TriggerTaskCheckpoint).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TaskManagerCheckpointingBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_TriggerTaskCheckpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.TriggerCheckpointRequest, global::FlinkDotNet.Proto.Internal.TriggerCheckpointResponse>(serviceImpl.TriggerTaskCheckpoint));
    }

  }
  /// <summary>
  /// TM hosts this, JM calls it
  /// </summary>
  public static partial class TaskExecution
  {
    static readonly string __ServiceName = "FlinkDotNet.Proto.TaskExecution";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor> __Marshaller_FlinkDotNet_Proto_TaskDeploymentDescriptor = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.DeployTaskResponse> __Marshaller_FlinkDotNet_Proto_DeployTaskResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.DeployTaskResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor, global::FlinkDotNet.Proto.Internal.DeployTaskResponse> __Method_DeployTask = new grpc::Method<global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor, global::FlinkDotNet.Proto.Internal.DeployTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeployTask",
        __Marshaller_FlinkDotNet_Proto_TaskDeploymentDescriptor,
        __Marshaller_FlinkDotNet_Proto_DeployTaskResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FlinkDotNet.Proto.Internal.JobmanagerInternalReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of TaskExecution</summary>
    [grpc::BindServiceMethod(typeof(TaskExecution), "BindService")]
    public abstract partial class TaskExecutionBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::FlinkDotNet.Proto.Internal.DeployTaskResponse> DeployTask(global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TaskExecution</summary>
    public partial class TaskExecutionClient : grpc::ClientBase<TaskExecutionClient>
    {
      /// <summary>Creates a new client for TaskExecution</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TaskExecutionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TaskExecution that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TaskExecutionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TaskExecutionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TaskExecutionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.DeployTaskResponse DeployTask(global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FlinkDotNet.Proto.Internal.DeployTaskResponse DeployTask(global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeployTask, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.DeployTaskResponse> DeployTaskAsync(global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FlinkDotNet.Proto.Internal.DeployTaskResponse> DeployTaskAsync(global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeployTask, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TaskExecutionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TaskExecutionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TaskExecutionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeployTask, serviceImpl.DeployTask).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TaskExecutionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DeployTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FlinkDotNet.Proto.Internal.TaskDeploymentDescriptor, global::FlinkDotNet.Proto.Internal.DeployTaskResponse>(serviceImpl.DeployTask));
    }

  }
  /// <summary>
  /// TM hosts this, other TMs call it
  /// </summary>
  public static partial class DataExchangeService
  {
    static readonly string __ServiceName = "FlinkDotNet.Proto.DataExchangeService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.UpstreamPayload> __Marshaller_FlinkDotNet_Proto_UpstreamPayload = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.UpstreamPayload.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FlinkDotNet.Proto.Internal.DownstreamPayload> __Marshaller_FlinkDotNet_Proto_DownstreamPayload = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FlinkDotNet.Proto.Internal.DownstreamPayload.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FlinkDotNet.Proto.Internal.UpstreamPayload, global::FlinkDotNet.Proto.Internal.DownstreamPayload> __Method_ExchangeData = new grpc::Method<global::FlinkDotNet.Proto.Internal.UpstreamPayload, global::FlinkDotNet.Proto.Internal.DownstreamPayload>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ExchangeData",
        __Marshaller_FlinkDotNet_Proto_UpstreamPayload,
        __Marshaller_FlinkDotNet_Proto_DownstreamPayload);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FlinkDotNet.Proto.Internal.JobmanagerInternalReflection.Descriptor.Services[4]; }
    }

    /// <summary>Base class for server-side implementations of DataExchangeService</summary>
    [grpc::BindServiceMethod(typeof(DataExchangeService), "BindService")]
    public abstract partial class DataExchangeServiceBase
    {
      /// <summary>
      /// Bi-directional streaming RPC for data and credit exchange
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ExchangeData(grpc::IAsyncStreamReader<global::FlinkDotNet.Proto.Internal.UpstreamPayload> requestStream, grpc::IServerStreamWriter<global::FlinkDotNet.Proto.Internal.DownstreamPayload> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataExchangeService</summary>
    public partial class DataExchangeServiceClient : grpc::ClientBase<DataExchangeServiceClient>
    {
      /// <summary>Creates a new client for DataExchangeService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataExchangeServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataExchangeService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataExchangeServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataExchangeServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataExchangeServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Bi-directional streaming RPC for data and credit exchange
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::FlinkDotNet.Proto.Internal.UpstreamPayload, global::FlinkDotNet.Proto.Internal.DownstreamPayload> ExchangeData(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeData(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bi-directional streaming RPC for data and credit exchange
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::FlinkDotNet.Proto.Internal.UpstreamPayload, global::FlinkDotNet.Proto.Internal.DownstreamPayload> ExchangeData(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ExchangeData, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DataExchangeServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataExchangeServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DataExchangeServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ExchangeData, serviceImpl.ExchangeData).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataExchangeServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ExchangeData, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::FlinkDotNet.Proto.Internal.UpstreamPayload, global::FlinkDotNet.Proto.Internal.DownstreamPayload>(serviceImpl.ExchangeData));
    }

  }
}
#endregion
