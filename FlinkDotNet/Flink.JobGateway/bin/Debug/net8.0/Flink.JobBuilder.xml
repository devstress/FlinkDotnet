<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flink.JobBuilder</name>
    </assembly>
    <members>
        <member name="T:Flink.JobBuilder.Extensions.ServiceCollectionExtensions">
            <summary>
            Extension methods for dependency injection
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Extensions.ServiceCollectionExtensions.AddFlinkJobBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,Flink.JobBuilder.Models.FlinkJobGatewayConfiguration)">
            <summary>
            Add Flink JobBuilder services to the DI container
            </summary>
            <param name="services">Service collection</param>
            <param name="configuration">Gateway configuration (optional)</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.Extensions.ServiceCollectionExtensions.AddFlinkJobBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Flink.JobBuilder.Models.FlinkJobGatewayConfiguration})">
            <summary>
            Add Flink JobBuilder services with configuration action
            </summary>
            <param name="services">Service collection</param>
            <param name="configureOptions">Configuration action</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="T:Flink.JobBuilder.Extensions.FlinkJobBuilderExtensions">
            <summary>
            Extension methods for job builder
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Extensions.FlinkJobBuilderExtensions.CreateJobBuilder(System.IServiceProvider)">
            <summary>
            Create a new FlinkJobBuilder instance
            </summary>
            <param name="serviceProvider">Service provider</param>
            <returns>FlinkJobBuilder instance</returns>
        </member>
        <member name="T:Flink.JobBuilder.Extensions.JobDefinitionExtensions">
            <summary>
            Extension methods for job definition validation
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Extensions.JobDefinitionExtensions.Validate(Flink.JobBuilder.Models.JobDefinition)">
            <summary>
            Validate the job definition
            </summary>
            <param name="jobDefinition">Job definition to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:Flink.JobBuilder.Extensions.JobValidationResult">
            <summary>
            Job validation result
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.FlinkJobBuilder">
            <summary>
            Fluent C# DSL for building Apache Flink streaming jobs
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.FromKafka(System.String,System.String)">
            <summary>
            Create a Kafka source for the streaming job
            </summary>
            <param name="topic">Kafka topic name</param>
            <param name="bootstrapServers">Kafka bootstrap servers (optional, can be configured via gateway)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.FromHttp(System.String,System.String,System.Int32)">
            <summary>
            Create an HTTP source for REST API polling
            </summary>
            <param name="url">HTTP URL to poll</param>
            <param name="method">HTTP method (default: GET)</param>
            <param name="intervalSeconds">Polling interval in seconds</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.FromDatabase(System.String,System.String,System.Int32)">
            <summary>
            Create a database source for polling queries
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="query">SQL query to execute</param>
            <param name="pollingIntervalSeconds">Polling interval in seconds</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Where(System.String)">
            <summary>
            Add a filter operation to the job
            </summary>
            <param name="expression">Filter expression (e.g., "Amount > 100")</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Where``1(System.Func{``0,System.Boolean})">
            <summary>
            Add a filter operation with a lambda expression
            </summary>
            <typeparam name="T">Type of the data</typeparam>
            <param name="predicate">Filter predicate</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.GroupBy(System.String)">
            <summary>
            Add a group by operation
            </summary>
            <param name="keyField">Field to group by (e.g., "Region")</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.GroupBy``2(System.Func{``0,``1})">
            <summary>
            Add a group by operation with a lambda expression
            </summary>
            <typeparam name="T">Type of the data</typeparam>
            <typeparam name="TKey">Type of the key</typeparam>
            <param name="keySelector">Key selector function</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Aggregate(System.String,System.String)">
            <summary>
            Add an aggregation operation
            </summary>
            <param name="aggregationType">Type of aggregation (SUM, COUNT, AVG, etc.)</param>
            <param name="field">Field to aggregate</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Aggregate``2(System.String,System.Func{``0,``1})">
            <summary>
            Add an aggregation operation with a lambda expression
            </summary>
            <typeparam name="T">Type of the data</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="aggregationType">Type of aggregation</param>
            <param name="fieldSelector">Field selector function</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Map(System.String)">
            <summary>
            Add a map/transform operation
            </summary>
            <param name="expression">Transformation expression</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Window(System.String,System.Int32,System.String)">
            <summary>
            Add a windowing operation
            </summary>
            <param name="windowType">Type of window (TUMBLING, SLIDING, etc.)</param>
            <param name="size">Window size</param>
            <param name="timeUnit">Time unit (SECONDS, MINUTES, etc.)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.AsyncHttp(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Add an async HTTP operation for non-blocking API calls
            </summary>
            <param name="url">HTTP URL to call</param>
            <param name="method">HTTP method</param>
            <param name="timeoutMs">Request timeout in milliseconds</param>
            <param name="headers">HTTP headers</param>
            <param name="bodyTemplate">Request body template</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.AsyncDatabase(System.String,System.String,System.Int32)">
            <summary>
            Add an async database operation
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="query">SQL query to execute</param>
            <param name="timeoutMs">Query timeout in milliseconds</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithState(System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Add state management for caching data
            </summary>
            <param name="stateKey">Key for the state</param>
            <param name="stateType">Type of state (value, list, map)</param>
            <param name="ttlMs">Time-to-live in milliseconds</param>
            <param name="defaultValue">Default value if state is empty</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithTimer(System.Int64,System.String,System.String)">
            <summary>
            Add a timer for scheduled operations
            </summary>
            <param name="delayMs">Delay in milliseconds</param>
            <param name="timerName">Name of the timer</param>
            <param name="action">Action to perform when timer fires</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithRetry(System.Int32,System.Collections.Generic.List{System.Int64},System.String,System.String)">
            <summary>
            Add retry logic with exponential backoff
            </summary>
            <param name="maxRetries">Maximum number of retries</param>
            <param name="delayPattern">Delay pattern in milliseconds</param>
            <param name="retryCondition">Condition to determine if retry is needed</param>
            <param name="deadLetterTopic">Topic for permanent failures</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithProcessFunction(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String})">
            <summary>
            Add a process function for complex stateful logic
            </summary>
            <param name="processType">Type of process function</param>
            <param name="parameters">Function parameters</param>
            <param name="stateKeys">State keys used by the function</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithSideOutput(System.String,System.String,Flink.JobBuilder.Models.ISinkDefinition)">
            <summary>
            Add side output for error handling
            </summary>
            <param name="outputTag">Tag for the side output</param>
            <param name="condition">Condition for routing to side output</param>
            <param name="sideOutputSink">Sink for the side output</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToKafka(System.String,System.String)">
            <summary>
            Set the output to a Kafka topic
            </summary>
            <param name="topic">Kafka topic name</param>
            <param name="bootstrapServers">Kafka bootstrap servers (optional)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToConsole">
            <summary>
            Set the output to console (for debugging)
            </summary>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToHttp(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Set the output to an HTTP endpoint
            </summary>
            <param name="url">HTTP URL to send data to</param>
            <param name="method">HTTP method (default: POST)</param>
            <param name="headers">HTTP headers</param>
            <param name="bodyTemplate">Request body template</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToDatabase(System.String,System.String,System.String)">
            <summary>
            Set the output to a database
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="table">Target table name</param>
            <param name="databaseType">Database type (postgresql, mysql, etc.)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToRedis(System.String,System.String,System.String)">
            <summary>
            Set the output to Redis for atomic operations and exactly-once semantics
            </summary>
            <param name="key">Redis key for operations</param>
            <param name="connectionString">Redis connection string (optional)</param>
            <param name="operationType">Redis operation type (increment, set, sadd, etc.)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.BuildJobDefinition">
            <summary>
            Generate the Intermediate Representation (IR) for this job
            </summary>
            <returns>JobDefinition containing the IR</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToJson">
            <summary>
            Generate the JSON Intermediate Representation
            </summary>
            <returns>JSON string representing the job</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Submit(System.String,System.Threading.CancellationToken)">
            <summary>
            Submit the job to the Flink Job Gateway
            </summary>
            <param name="jobName">Name for the job (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job submission result</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.SubmitAndWait(System.String,System.Threading.CancellationToken)">
            <summary>
            Submit the job and wait for completion (for bounded jobs)
            </summary>
            <param name="jobName">Name for the job (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job execution result</returns>
        </member>
        <member name="T:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup">
            <summary>
            Apache Flink-style consumer group management for Kafka integration
            Provides checkpoint-based offset management and exactly-once processing guarantees
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup})">
            <summary>
            Constructor for FlinkKafkaConsumerGroup
            </summary>
            <param name="consumerConfig">Kafka consumer configuration optimized for Flink</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.InitializeAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Initialize the consumer group with topics
            </summary>
            <param name="topics">Topics to subscribe to</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.WaitForKafkaSetupAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Wait for Kafka setup to be ready
            Enhanced connection resilience with comprehensive retry logic
            </summary>
            <param name="bootstrapServers">Kafka bootstrap servers</param>
            <param name="timeout">Maximum wait timeout</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.ConsumeMessageAsync(System.TimeSpan)">
            <summary>
            Consume a message with Flink-style semantics
            </summary>
            <param name="timeout">Consume timeout</param>
            <returns>Message result or null if timeout</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.SnapshotState(System.Int64,System.Int64)">
            <summary>
            Snapshot state for checkpoint (Flink checkpointing pattern)
            </summary>
            <param name="checkpointId">Checkpoint ID</param>
            <param name="checkpointTimestamp">Checkpoint timestamp</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.RestoreState(System.Collections.Generic.Dictionary{System.String,System.Int64})">
            <summary>
            Restore state from checkpoint
            </summary>
            <param name="checkpointState">State to restore</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.CommitCheckpointOffsetsAsync(System.Int64)">
            <summary>
            Commit offsets after successful checkpoint
            </summary>
            <param name="checkpointId">Completed checkpoint ID</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.GetAssignment">
            <summary>
            Get current partition assignment
            </summary>
            <returns>List of assigned partitions</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.ValidateFlinkConfiguration">
            <summary>
            Validate Flink-optimal configuration
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.Dispose">
            <summary>
            Dispose resources
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.Dispose(System.Boolean)">
            <summary>
            Protected dispose pattern
            </summary>
            <param name="disposing">Whether disposing from Dispose() call</param>
        </member>
        <member name="T:Flink.JobBuilder.Flink.ConsumeResult">
            <summary>
            Result of consuming a message
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.TopicPartition">
            <summary>
            Topic partition representation
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.FlinkRedisSink">
            <summary>
            Apache Flink-style Redis sink for atomic operations and exactly-once semantics
            Supports stress testing with atomic counters and set operations
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Flink.FlinkRedisSink})">
            <summary>
            Constructor for FlinkRedisSink
            </summary>
            <param name="connectionString">Redis connection string</param>
            <param name="redisConfig">Redis configuration options</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initialize Redis connection with Flink-optimal settings
            </summary>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.AtomicIncrementAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Atomic increment operation for stress testing
            Used in 1M message stress tests with Redis counters
            </summary>
            <param name="key">Counter key</param>
            <param name="increment">Increment value (default: 1)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>New counter value after increment</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.AtomicSetAddAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Atomic set operation for exactly-once semantics
            Ensures message IDs are processed exactly once
            </summary>
            <param name="setKey">Set key for deduplication</param>
            <param name="member">Member to add to set</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if member was added (first time), false if already existed</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.SetContainsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if member exists in set (for exactly-once validation)
            </summary>
            <param name="setKey">Set key</param>
            <param name="member">Member to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.GetCounterValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get current counter value
            </summary>
            <param name="key">Counter key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Current counter value or 0 if key doesn't exist</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.GetSetSizeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get set size for validation
            </summary>
            <param name="setKey">Set key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of members in set</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.ExecuteTransactionAsync(System.Collections.Generic.IEnumerable{Flink.JobBuilder.Flink.RedisOperation},System.Threading.CancellationToken)">
            <summary>
            Execute Redis transaction for exactly-once semantics
            </summary>
            <param name="operations">Operations to execute atomically</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Transaction results</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.MaskConnectionString(System.String)">
            <summary>
            Mask connection string for logging (remove sensitive information)
            </summary>
            <param name="connectionString">Original connection string</param>
            <returns>Masked connection string</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.Dispose">
            <summary>
            Dispose resources
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.Dispose(System.Boolean)">
            <summary>
            Protected dispose pattern
            </summary>
            <param name="disposing">Whether disposing from Dispose() call</param>
        </member>
        <member name="T:Flink.JobBuilder.Flink.RedisOperationType">
            <summary>
            Redis operation types for transactions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.RedisOperation">
            <summary>
            Redis operation for transactions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.RedisTransactionResult">
            <summary>
            Result of Redis transaction execution
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobDefinition">
            <summary>
            Complete job definition containing source, operations, and sink
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobMetadata">
            <summary>
            Metadata about the job
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.ISourceDefinition">
            <summary>
            Base interface for all source definitions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.KafkaSourceDefinition">
            <summary>
            Kafka source definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.FileSourceDefinition">
            <summary>
            File source definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.HttpSourceDefinition">
            <summary>
            HTTP source definition for REST API calls
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.DatabaseSourceDefinition">
            <summary>
            Database source definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.IOperationDefinition">
            <summary>
            Base interface for all operation definitions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.FilterOperationDefinition">
            <summary>
            Filter operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.MapOperationDefinition">
            <summary>
            Map/transform operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.GroupByOperationDefinition">
            <summary>
            Group by operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.AggregateOperationDefinition">
            <summary>
            Aggregation operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.WindowOperationDefinition">
            <summary>
            Windowing operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JoinOperationDefinition">
            <summary>
            Join operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.AsyncFunctionOperationDefinition">
            <summary>
            Async function operation for non-blocking I/O operations
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.ProcessFunctionOperationDefinition">
            <summary>
            Process function operation for complex stateful logic
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.StateOperationDefinition">
            <summary>
            State operation for managing stateful data
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.TimerOperationDefinition">
            <summary>
            Timer operation for scheduled processing
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.RetryOperationDefinition">
            <summary>
            Retry operation with exponential backoff
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.SideOutputOperationDefinition">
            <summary>
            Side output operation for error handling and dead letter patterns
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.ISinkDefinition">
            <summary>
            Base interface for all sink definitions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.KafkaSinkDefinition">
            <summary>
            Kafka sink definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.ConsoleSinkDefinition">
            <summary>
            Console sink definition (for debugging)
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.FileSinkDefinition">
            <summary>
            File sink definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.DatabaseSinkDefinition">
            <summary>
            Database sink definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.HttpSinkDefinition">
            <summary>
            HTTP sink definition for REST API calls
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.RedisSinkDefinition">
            <summary>
            Redis sink definition for atomic operations and exactly-once semantics
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobSubmissionResult">
            <summary>
            Result of job submission to Flink Job Gateway
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Models.JobSubmissionResult.IsSuccess">
            <summary>
            Gets whether the submission was successful
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Models.JobSubmissionResult.CreateSuccess(System.String,System.String)">
            <summary>
            Creates a successful job submission result
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Models.JobSubmissionResult.CreateFailure(System.String,System.String)">
            <summary>
            Creates a failed job submission result
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobExecutionResult">
            <summary>
            Result of job execution (for bounded jobs)
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobStatus">
            <summary>
            Job status information
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobMetrics">
            <summary>
            Job execution metrics
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.FlinkJobGatewayConfiguration">
            <summary>
            Gateway service configuration
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Services.FlinkJobGatewayService">
            <summary>
            HTTP-based implementation for communicating with Flink Job Gateway
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Services.IFlinkJobGatewayService">
            <summary>
            Interface for communicating with Flink Job Gateway
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.SubmitJobAsync(Flink.JobBuilder.Models.JobDefinition,System.Threading.CancellationToken)">
            <summary>
            Submit a job to the Flink cluster via the gateway
            </summary>
            <param name="jobDefinition">Job definition with IR</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job submission result</returns>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.GetJobStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the status of a running job
            </summary>
            <param name="flinkJobId">Flink job ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job status</returns>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.GetJobMetricsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get metrics for a running job
            </summary>
            <param name="flinkJobId">Flink job ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job metrics</returns>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.CancelJobAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel a running job
            </summary>
            <param name="flinkJobId">Flink job ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if canceled successfully</returns>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.HealthCheckAsync(System.Threading.CancellationToken)">
            <summary>
            Test connectivity to the gateway
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if gateway is reachable</returns>
        </member>
    </members>
</doc>
