<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flink.JobBuilder</name>
    </assembly>
    <members>
        <member name="T:Flink.JobBuilder.Backpressure.BufferPool`1">
            <summary>
            Buffer Pool implementation with size and time thresholds following Flink patterns.
            Manages buffering of items with configurable size and time-based flush triggers.
            
            Features:
            - Size-based threshold: Flush when buffer reaches maximum size
            - Time-based threshold: Flush when items have been buffered for too long
            - Backpressure integration: Apply backpressure when buffer is full
            - Thread-safe operations for concurrent producer/consumer scenarios
            
            Based on Flink's buffer pool design for AsyncSink optimization.
            </summary>
            <typeparam name="T">Type of items being buffered</typeparam>
        </member>
        <member name="E:Flink.JobBuilder.Backpressure.BufferPool`1.OnFlush">
            <summary>
            Event triggered when buffer should be flushed.
            </summary>
        </member>
        <member name="E:Flink.JobBuilder.Backpressure.BufferPool`1.OnBackpressure">
            <summary>
            Event triggered when backpressure should be applied.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.BufferPool`1.#ctor(System.Int32,System.TimeSpan,Flink.JobBuilder.Backpressure.IRateLimitingStrategy)">
            <summary>
            Creates a new BufferPool with size and time thresholds.
            </summary>
            <param name="maxSize">Maximum number of items in buffer before forced flush</param>
            <param name="maxAge">Maximum time items can remain in buffer before forced flush</param>
            <param name="rateLimiter">Optional rate limiter for flush operations</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.BufferPool`1.TryAddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds an item to the buffer, potentially triggering flush or backpressure.
            </summary>
            <param name="item">Item to buffer</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if item was buffered, false if backpressure was applied</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.BufferPool`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds an item to buffer, waiting if backpressure is applied.
            </summary>
            <param name="item">Item to buffer</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.BufferPool`1.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Forces immediate flush of all buffered items.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.BufferPool`1.GetStats">
            <summary>
            Gets current buffer statistics.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.BufferedItem`1">
            <summary>
            Represents an item in the buffer with timestamp.
            </summary>
            <typeparam name="T">Type of the buffered item</typeparam>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.BufferPoolStats">
            <summary>
            Statistics about buffer pool state.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.BackpressureEvent">
            <summary>
            Backpressure event information.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.BackpressureReason">
            <summary>
            Reasons for backpressure activation.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.IJobManagerRateLimiterCoordinator">
            <summary>
            JobManager coordinator interface for distributed rate limiting.
            Enables coordination of rate limits across Flink JobManager instances.
            
            Based on Flink's AsyncSink coordination patterns for distributed rate limiting.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IJobManagerRateLimiterCoordinator.CoordinateRateLimitAsync(System.String,System.Double,System.Threading.CancellationToken)">
            <summary>
            Coordinates rate limit updates across JobManager instances.
            </summary>
            <param name="rateLimiterId">Unique identifier for the rate limiter</param>
            <param name="newRateLimit">New rate limit to coordinate</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IJobManagerRateLimiterCoordinator.RegisterRateLimiterAsync(System.String,System.Action{System.Double},System.Threading.CancellationToken)">
            <summary>
            Registers this rate limiter instance with the JobManager.
            </summary>
            <param name="rateLimiterId">Unique identifier for the rate limiter</param>
            <param name="onRateLimitUpdated">Callback when rate limit is updated by JobManager</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IJobManagerRateLimiterCoordinator.UnregisterRateLimiterAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Unregisters this rate limiter instance from the JobManager.
            </summary>
            <param name="rateLimiterId">Unique identifier for the rate limiter</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IJobManagerRateLimiterCoordinator.GetCoordinatedRateLimitAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the current coordinated rate limit from JobManager.
            </summary>
            <param name="rateLimiterId">Unique identifier for the rate limiter</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IJobManagerRateLimiterCoordinator.ReportUtilizationAsync(System.String,System.Double,System.Threading.CancellationToken)">
            <summary>
            Reports current utilization to JobManager for adaptive rate limiting.
            </summary>
            <param name="rateLimiterId">Unique identifier for the rate limiter</param>
            <param name="utilization">Current utilization (0.0 to 1.0)</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.LocalJobManagerRateLimiterCoordinator">
            <summary>
            Default JobManager coordinator implementation that provides local coordination only.
            For full distributed coordination, use KafkaJobManagerRateLimiterCoordinator.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage">
            <summary>
            In-memory rate limiter state storage implementation.
            
            This implementation is provided for comparison with Kafka-based storage.
            While suitable for single-instance deployments, it has significant limitations:
            
            LIMITATIONS vs Kafka:
            
            1. SCALE:
               - Limited to single process memory
               - Cannot scale horizontally across multiple instances
               - Memory constraints limit the number of rate limiters
            
            2. PERSISTENCE:
               - All state is lost on process restart
               - No durability guarantees
               - No recovery mechanism for failures
            
            3. INFRASTRUCTURE:
               - Simple setup but no high availability
               - Single point of failure
               - No built-in replication or backup
            
            4. AVAILABILITY AND RESILIENCE:
               - Process restart loses all rate limiter state
               - No failover capabilities
               - Memory leaks can affect entire application
            
            Use this implementation only for:
            - Development and testing environments
            - Single-instance deployments with acceptable data loss
            - Scenarios where external dependencies must be minimized
            
            For production environments, use KafkaRateLimiterStateStorage instead.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.#ctor(Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage})">
            <summary>
            Initializes in-memory rate limiter state storage.
            </summary>
            <param name="logger">Logger instance</param>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.BackendInfo">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.SaveStateAsync(System.String,Flink.JobBuilder.Backpressure.RateLimiterState,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.LoadStateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.IsHealthyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.StateCount">
            <summary>
            Gets the current number of stored rate limiter states.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.ClearAllStates">
            <summary>
            Clears all stored rate limiter states.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage.Dispose(System.Boolean)">
            <summary>
            Protected dispose method following standard pattern.
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.IRateLimiterStateStorage">
            <summary>
            Interface for rate limiter state storage backend.
            Supports both in-memory and distributed storage implementations.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IRateLimiterStateStorage.SaveStateAsync(System.String,Flink.JobBuilder.Backpressure.RateLimiterState,System.Threading.CancellationToken)">
            <summary>
            Saves rate limiter state to storage.
            </summary>
            <param name="rateLimiterId">Unique identifier for the rate limiter</param>
            <param name="state">State to save</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IRateLimiterStateStorage.LoadStateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Loads rate limiter state from storage.
            </summary>
            <param name="rateLimiterId">Unique identifier for the rate limiter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rate limiter state or null if not found</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IRateLimiterStateStorage.IsHealthyAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if the storage backend is available and operational.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if storage is healthy</returns>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.IRateLimiterStateStorage.BackendInfo">
            <summary>
            Gets storage backend information.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.RateLimiterState">
            <summary>
            Rate limiter state for persistence.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.StorageBackendInfo">
            <summary>
            Information about the storage backend.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.IRateLimitingStrategy">
            <summary>
            Rate limiting strategy interface following Apache Flink 2.0 AsyncSink patterns.
            Implements custom RateLimitingStrategy for optimizing throughput of async sinks.
            
            Based on: https://flink.apache.org/2022/11/25/optimising-the-throughput-of-async-sinks-using-a-custom-ratelimitingstrategy/
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IRateLimitingStrategy.TryAcquireAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Attempts to acquire permission to proceed with the operation.
            Returns true if permission is granted, false if rate limited.
            </summary>
            <param name="permits">Number of permits to acquire (default: 1)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if operation can proceed, false if rate limited</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IRateLimitingStrategy.TryAcquire(System.Int32)">
            <summary>
            Synchronous version of TryAcquireAsync for Flink JobManager compatibility.
            When jobs are submitted to Flink JobManager, async patterns may not work correctly
            due to serialization and execution context changes. Use this method instead.
            </summary>
            <param name="permits">Number of permits to acquire (default: 1)</param>
            <returns>True if operation can proceed, false if rate limited</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IRateLimitingStrategy.AcquireAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Acquires permission to proceed, waiting if necessary.
            Implements backpressure by blocking until permits are available.
            </summary>
            <param name="permits">Number of permits to acquire (default: 1)</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.IRateLimitingStrategy.CurrentRateLimit">
            <summary>
            Gets the current rate limit in operations per second.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.IRateLimitingStrategy.CurrentUtilization">
            <summary>
            Gets the current utilization percentage (0.0 to 1.0).
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IRateLimitingStrategy.UpdateRateLimit(System.Double)">
            <summary>
            Updates the rate limit dynamically based on system conditions.
            Supports adaptive rate limiting for optimal throughput.
            </summary>
            <param name="newRateLimit">New rate limit in operations per second</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.IRateLimitingStrategy.Reset">
            <summary>
            Resets the rate limiter state.
            Useful for testing and recovery scenarios.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.RateLimitingTier">
            <summary>
            Rate limiting configuration for different enforcement tiers.
            Supports hierarchical rate limiting from global to endpoint level.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.RateLimitingEnforcement">
            <summary>
            Types of rate limiting enforcement strategies.
            </summary>
        </member>
        <member name="F:Flink.JobBuilder.Backpressure.RateLimitingEnforcement.HardLimit">
            <summary>Hard limit - immediately reject requests exceeding limit</summary>
        </member>
        <member name="F:Flink.JobBuilder.Backpressure.RateLimitingEnforcement.Throttling">
            <summary>Throttling - slow down requests but don't reject</summary>
        </member>
        <member name="F:Flink.JobBuilder.Backpressure.RateLimitingEnforcement.Backpressure">
            <summary>Backpressure - signal upstream to slow down</summary>
        </member>
        <member name="F:Flink.JobBuilder.Backpressure.RateLimitingEnforcement.CircuitBreaker">
            <summary>Circuit breaker - stop requests after threshold breached</summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage">
            <summary>
            Kafka-based rate limiter state storage implementation.
            
            Why Kafka over Redis for Rate Limiter State Storage:
            
            1. SCALE:
               - Kafka supports horizontal scaling through partitions distributed across multiple brokers
               - Each rate limiter can have its own partition for parallel processing
               - Redis clustering requires careful sharding and has memory constraints per node
               - Kafka can handle much larger datasets with automatic load balancing
            
            2. PERSISTENCE:
               - Kafka provides durable, replicated, append-only log storage by design
               - No need for Redis AOF (Append Only File) configuration and performance tuning
               - Kafka's segment-based storage is more efficient for high-throughput scenarios
               - Built-in log compaction ensures only latest state is retained
            
            3. INFRASTRUCTURE SETUP:
               - Redis requires separate persistence configuration, clustering setup, sentinel for HA
               - Kafka provides built-in replication, leader election, and distributed coordination
               - Less moving parts and configuration complexity with Kafka
               - Better integration with existing Flink streaming infrastructure
            
            4. AVAILABILITY AND RESILIENCE:
               - Kafka provides automatic leader election and replica promotion
               - Built-in partition replication across multiple brokers (min 3 replicas recommended)
               - Better handling of split-brain scenarios and network partitions
               - Redis clustering can have issues with node failures requiring manual intervention
               - Kafka's ISR (In-Sync Replicas) ensures consistent state even during failures
            
            This implementation leverages Kafka's partitioned, replicated log for distributed
            rate limiter state management, providing enterprise-grade scaling and resilience.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.#ctor(Flink.JobBuilder.Backpressure.KafkaConfig,System.String,Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage})">
            <summary>
            Initializes Kafka-based rate limiter state storage.
            </summary>
            <param name="kafkaConfig">Kafka producer/consumer configuration</param>
            <param name="topicName">Topic name for rate limiter state (default: rate-limiter-state)</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.BackendInfo">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.SaveStateAsync(System.String,Flink.JobBuilder.Backpressure.RateLimiterState,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.LoadStateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.IsHealthyAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.LoadStateFromKafkaAsync">
            <summary>
            Loads rate limiter state from Kafka by seeking to the latest message for the given key.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.FlushCachedStateAsync(System.Object)">
            <summary>
            Periodically flushes cached state to Kafka for durability.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage.Dispose(System.Boolean)">
            <summary>
            Protected dispose method following standard pattern.
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.KafkaConfig">
            <summary>
            Kafka configuration for rate limiter state storage.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.KafkaConfig.BootstrapServers">
            <summary>
            Kafka bootstrap servers (comma-separated list).
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.KafkaConfig.Security">
            <summary>
            Security configuration for production environments.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.KafkaConfig.Performance">
            <summary>
            Performance tuning configuration.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.KafkaSecurityConfig">
            <summary>
            Kafka security configuration.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.KafkaPerformanceConfig">
            <summary>
            Kafka performance tuning configuration.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.KafkaPerformanceConfig.ReplicationFactor">
            <summary>
            Number of replicas for rate limiter state topic (default: 3 for high availability).
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.KafkaPerformanceConfig.PartitionCount">
            <summary>
            Number of partitions for rate limiter state topic (default: 12 for parallelism).
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.KafkaPerformanceConfig.RetentionTime">
            <summary>
            Log retention for rate limiter state (default: 7 days).
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.KafkaPerformanceConfig.EnableCompaction">
            <summary>
            Enable log compaction to keep only latest state per rate limiter.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.MultiTierRateLimiter">
            <summary>
            Multi-tier rate limiter providing hierarchical rate limiting enforcement with Kafka-based state storage.
            Implements multiple tiers: Global → Topic → Consumer Group → Consumer → Endpoint
            
            Features:
            - Hierarchical enforcement (each tier respects parent limits)
            - Per-client and per-IP quotas
            - Dynamic scaling and rebalancing integration
            - Fair allocation across consumers
            - Burst accommodation within configured windows
            - Kafka-based distributed state storage for enterprise scaling
            
            Storage Evolution:
            - Previous version: In-memory ConcurrentDictionary (single instance only)
            - Current version: Kafka partitions for distributed, persistent state management
            
            Based on LinkedIn's finite resource management patterns with Flink 2.0 AsyncSink optimizations.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.#ctor(Flink.JobBuilder.Backpressure.IRateLimiterStateStorage)">
            <summary>
            Initializes multi-tier rate limiter with Kafka-based state storage.
            </summary>
            <param name="stateStorage">State storage backend (Kafka recommended for production)</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ConfigureTiers(System.Collections.Generic.IEnumerable{Flink.JobBuilder.Backpressure.RateLimitingTier})">
            <summary>
            Configures the rate limiting tiers.
            </summary>
            <param name="tiers">List of rate limiting tiers in hierarchical order</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.TryAcquire(Flink.JobBuilder.Backpressure.RateLimitingContext,System.Int32)">
            <summary>
            Synchronous version of TryAcquireAsync for Flink JobManager compatibility.
            When jobs are submitted to Flink JobManager, async patterns may not work correctly.
            </summary>
            <param name="context">Rate limiting context</param>
            <param name="permits">Number of permits to acquire</param>
            <returns>True if all tiers allow the request</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.TryAcquireAsync(Flink.JobBuilder.Backpressure.RateLimitingContext,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Attempts to acquire permits from all applicable tiers.
            Must pass all tier checks to be allowed.
            </summary>
            <param name="context">Request context for tier identification</param>
            <param name="permits">Number of permits to acquire</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if all tiers allow the request</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.AcquireAsync(Flink.JobBuilder.Backpressure.RateLimitingContext,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Acquires permits from all applicable tiers, waiting if necessary.
            Implements backpressure by blocking until all tiers allow the request.
            </summary>
            <param name="context">Request context for tier identification</param>
            <param name="permits">Number of permits to acquire</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.UpdateRateLimit(System.String,System.Double)">
            <summary>
            Updates rate limits dynamically for adaptive scaling.
            </summary>
            <param name="tierName">Name of tier to update</param>
            <param name="newRateLimit">New rate limit</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.GetUtilizationMetrics">
            <summary>
            Gets current utilization across all tiers.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidateHierarchicalEnforcement">
            <summary>
            Validates hierarchical enforcement is working correctly.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidateBurstAccommodation">
            <summary>
            Validates burst accommodation is working correctly.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidatePriorityPreservation">
            <summary>
            Validates priority preservation for different workload types.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidateAdaptiveAdjustment">
            <summary>
            Validates adaptive adjustment based on resource availability.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidateRebalancingIntegration">
            <summary>
            Validates integration with rebalancing operations.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidateFairAllocation">
            <summary>
            Validates fair allocation across consumers.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidateMultiTierEnforcement">
            <summary>
            Validates multi-tier enforcement implementation.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidateQuotaEnforcement">
            <summary>
            Validates quota enforcement mechanisms.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.Dispose(System.Boolean)">
            <summary>
            Protected dispose method following standard pattern.
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.StorageBackend">
            <summary>
            Gets storage backend information for all tiers.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.IsDistributed">
            <summary>
            Checks if all rate limiters are using distributed storage.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.IsPersistent">
            <summary>
            Checks if all rate limiter states are persistent.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.ValidateProducerThrottling(System.String)">
            <summary>
            Validates producer throttling based on tier rules.
            </summary>
            <param name="producerId">Producer identifier</param>
            <returns>True if producer throttling is properly configured</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.MultiTierRateLimiter.GetQuotaStatus(System.String)">
            <summary>
            Gets the current quota status for a specific tier.
            </summary>
            <param name="tierName">Name of the tier</param>
            <returns>Quota status information</returns>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.RateLimitingContext">
            <summary>
            Context information for rate limiting decisions.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.RateLimiterFactory">
            <summary>
            Factory for creating rate limiters with appropriate storage backends.
            Provides easy configuration and best practice defaults.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.RateLimiterFactory.CreateWithKafkaStorage(System.Double,System.Double,Flink.JobBuilder.Backpressure.KafkaConfig,System.String,Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage})">
            <summary>
            Creates a TokenBucket rate limiter with Kafka-based storage (recommended for production).
            </summary>
            <param name="rateLimit">Maximum sustained rate in operations per second</param>
            <param name="burstCapacity">Maximum burst capacity (tokens that can accumulate)</param>
            <param name="kafkaConfig">Kafka configuration for state storage</param>
            <param name="rateLimiterId">Unique identifier (auto-generated if not provided)</param>
            <param name="logger">Logger instance</param>
            <returns>TokenBucket rate limiter with Kafka storage</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.RateLimiterFactory.CreateWithInMemoryStorage(System.Double,System.Double,System.String,Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage})">
            <summary>
            Creates a TokenBucket rate limiter with in-memory storage (development/testing only).
            </summary>
            <param name="rateLimit">Maximum sustained rate in operations per second</param>
            <param name="burstCapacity">Maximum burst capacity (tokens that can accumulate)</param>
            <param name="rateLimiterId">Unique identifier (auto-generated if not provided)</param>
            <param name="logger">Logger instance</param>
            <returns>TokenBucket rate limiter with in-memory storage</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.RateLimiterFactory.CreateMultiTierWithKafkaStorage(Flink.JobBuilder.Backpressure.KafkaConfig,Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Backpressure.KafkaRateLimiterStateStorage})">
            <summary>
            Creates a multi-tier rate limiter with Kafka-based storage (recommended for production).
            </summary>
            <param name="kafkaConfig">Kafka configuration for state storage</param>
            <param name="logger">Logger instance</param>
            <returns>Multi-tier rate limiter with Kafka storage</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.RateLimiterFactory.CreateMultiTierWithInMemoryStorage(Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage})">
            <summary>
            Creates a multi-tier rate limiter with in-memory storage (development/testing only).
            </summary>
            <param name="logger">Logger instance</param>
            <returns>Multi-tier rate limiter with in-memory storage</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.RateLimiterFactory.CreateProductionKafkaConfig(System.String,System.String)">
            <summary>
            Creates a production-ready configuration with Kafka storage and recommended settings.
            
            This configuration provides:
            - High availability through Kafka replication (3 replicas)
            - Horizontal scaling through partitions (12 partitions)
            - Log compaction to retain only latest state
            - Appropriate timeouts and error handling
            </summary>
            <param name="bootstrapServers">Kafka bootstrap servers</param>
            <param name="topicName">Topic name for rate limiter state (default: rate-limiter-state)</param>
            <returns>Production-ready Kafka configuration</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.RateLimiterFactory.CreateDevelopmentConfiguration(System.Double,System.Double,Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Backpressure.InMemoryRateLimiterStateStorage})">
            <summary>
            Creates a development configuration with in-memory storage and logging.
            </summary>
            <param name="rateLimit">Rate limit per second</param>
            <param name="burstCapacity">Maximum burst capacity</param>
            <param name="logger">Logger instance</param>
            <returns>Development-friendly configuration</returns>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter">
            <summary>
            Sliding Window rate limiter implementation for time-based rate limiting.
            Tracks actual request rate over a sliding time window for precise control.
            
            Algorithm:
            - Maintains timestamps of recent requests in sliding window
            - Calculates current rate based on request count in window
            - Allows bursts within window constraints
            - More precise than token bucket for time-sensitive scenarios
            
            Use cases:
            - API rate limiting with precise time windows
            - Network bandwidth limiting
            - Database connection rate limiting
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new SlidingWindow rate limiter.
            </summary>
            <param name="maxRequestsPerSecond">Maximum requests per second</param>
            <param name="windowSizeSeconds">Size of sliding window in seconds</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.TryAcquireAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.TryAcquire(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.AcquireAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.CurrentRateLimit">
            <inheritdoc />
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.CurrentUtilization">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.UpdateRateLimit(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.Reset">
            <inheritdoc />
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.CurrentRequestCount">
            <summary>
            Gets current request count in the sliding window.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.ActualRate">
            <summary>
            Gets the actual rate based on current window contents.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.SlidingWindowRateLimiter.WindowSize">
            <summary>
            Gets the window size.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.ConsumerLagMonitor">
            <summary>
            Supporting classes for backpressure testing and validation.
            These provide the infrastructure components referenced in the test step definitions.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter">
            <summary>
            Token Bucket rate limiter implementation following Apache Flink 2.0 AsyncSink patterns.
            Provides burst capacity with sustained rate limiting for optimal throughput control.
            
            IMPROVEMENTS (v2.0):
            - Non-blocking async operations using TaskCompletionSource queue
            - JobManager integration for distributed coordination  
            - Credit-based flow control integration
            - Eliminated polling-based waiting for better thread efficiency
            
            Storage Backend Evolution:
            - Previous version: In-memory storage (limited scaling, no persistence)
            - Current version: Kafka-based distributed storage for enterprise scaling
            
            Algorithm:
            - Tokens are added to bucket at configured rate
            - Operations consume tokens from bucket
            - Burst capacity allows temporary spikes above sustained rate
            - When bucket is empty, operations wait efficiently using async queue
            - State is persisted to Kafka for distributed scaling and fault tolerance
            - JobManager coordinates rate limits across distributed instances
            
            Reference: Flink AsyncSink RateLimitingStrategy optimization
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.#ctor(System.Double,System.Double,System.String,Flink.JobBuilder.Backpressure.IRateLimiterStateStorage,Flink.JobBuilder.Backpressure.IJobManagerRateLimiterCoordinator)">
            <summary>
            Creates a new TokenBucket rate limiter with Kafka-based state storage and JobManager coordination.
            </summary>
            <param name="rateLimit">Maximum sustained rate in operations per second</param>
            <param name="burstCapacity">Maximum burst capacity (tokens that can accumulate)</param>
            <param name="rateLimiterId">Unique identifier for this rate limiter instance</param>
            <param name="stateStorage">State storage backend (Kafka recommended for production)</param>
            <param name="jobManagerCoordinator">JobManager coordinator for distributed rate limiting</param>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.TryAcquireAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.TryAcquire(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.AcquireAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.CurrentRateLimit">
            <inheritdoc />
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.CurrentUtilization">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.CanAccommodateBurst(System.Double)">
            <summary>
            Determines if the token bucket can accommodate a burst of the specified size.
            </summary>
            <param name="burstSize">The size of the burst to test for accommodation</param>
            <returns>True if the burst can be accommodated, false otherwise</returns>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.UpdateRateLimit(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.Reset">
            <inheritdoc />
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.CurrentTokens">
            <summary>
            Gets current token count for monitoring/debugging.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.MaxTokens">
            <summary>
            Gets maximum token capacity.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.RateLimiterId">
            <summary>
            Gets the unique identifier for this rate limiter.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.StorageBackend">
            <summary>
            Gets the storage backend information.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.IsDistributed">
            <summary>
            Checks if the rate limiter is using distributed storage.
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.IsPersistent">
            <summary>
            Checks if the rate limiter state is persistent.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.PersistStateAsync(System.Object)">
            <summary>
            Persists current state to storage backend.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.RestoreStateAsync">
            <summary>
            Restores state from storage backend.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.ProcessWaitingRequestsAsync(System.Object)">
            <summary>
            Processes waiting requests efficiently using async patterns (v2.0 improvement).
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.OnJobManagerRateLimitUpdated(System.Double)">
            <summary>
            Callback for JobManager rate limit updates (v2.0 improvement).
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Backpressure.TokenBucketRateLimiter.Dispose(System.Boolean)">
            <summary>
            Protected dispose method following standard pattern.
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:Flink.JobBuilder.Backpressure.WaitingRequest">
            <summary>
            Represents a waiting request in the async queue (v2.0 improvement).
            Used for efficient non-blocking async operations.
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Demo.RateLimitingDemo">
            <summary>
            Demonstration of Flink.NET rate limiting implementation.
            Shows how the enhanced backpressure system works with concrete examples.
            
            This demonstrates the implementation referenced in:
            https://flink.apache.org/2022/11/25/optimising-the-throughput-of-async-sinks-using-a-custom-ratelimitingstrategy/
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Extensions.ServiceCollectionExtensions">
            <summary>
            Extension methods for dependency injection
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Extensions.ServiceCollectionExtensions.AddFlinkJobBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,Flink.JobBuilder.Models.FlinkJobGatewayConfiguration)">
            <summary>
            Add Flink JobBuilder services to the DI container
            </summary>
            <param name="services">Service collection</param>
            <param name="configuration">Gateway configuration (optional)</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.Extensions.ServiceCollectionExtensions.AddFlinkJobBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Flink.JobBuilder.Models.FlinkJobGatewayConfiguration})">
            <summary>
            Add Flink JobBuilder services with configuration action
            </summary>
            <param name="services">Service collection</param>
            <param name="configureOptions">Configuration action</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="T:Flink.JobBuilder.Extensions.FlinkJobBuilderExtensions">
            <summary>
            Extension methods for job builder
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Extensions.FlinkJobBuilderExtensions.CreateJobBuilder(System.IServiceProvider)">
            <summary>
            Create a new FlinkJobBuilder instance
            </summary>
            <param name="serviceProvider">Service provider</param>
            <returns>FlinkJobBuilder instance</returns>
        </member>
        <member name="T:Flink.JobBuilder.Extensions.JobDefinitionExtensions">
            <summary>
            Extension methods for job definition validation
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Extensions.JobDefinitionExtensions.Validate(Flink.JobBuilder.Models.JobDefinition)">
            <summary>
            Validate the job definition
            </summary>
            <param name="jobDefinition">Job definition to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:Flink.JobBuilder.Extensions.JobValidationResult">
            <summary>
            Job validation result
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup">
            <summary>
            Apache Flink-style consumer group management for Kafka integration
            Provides checkpoint-based offset management and exactly-once processing guarantees
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup})">
            <summary>
            Constructor for FlinkKafkaConsumerGroup
            </summary>
            <param name="consumerConfig">Kafka consumer configuration optimized for Flink</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.InitializeAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Initialize the consumer group with topics
            </summary>
            <param name="topics">Topics to subscribe to</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.WaitForKafkaSetupAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Wait for Kafka setup to be ready
            Enhanced connection resilience with comprehensive retry logic
            </summary>
            <param name="bootstrapServers">Kafka bootstrap servers</param>
            <param name="timeout">Maximum wait timeout</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.ConsumeMessageAsync(System.TimeSpan)">
            <summary>
            Consume a message with Flink-style semantics
            </summary>
            <param name="timeout">Consume timeout</param>
            <returns>Message result or null if timeout</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.SnapshotState(System.Int64,System.Int64)">
            <summary>
            Snapshot state for checkpoint (Flink checkpointing pattern)
            </summary>
            <param name="checkpointId">Checkpoint ID</param>
            <param name="checkpointTimestamp">Checkpoint timestamp</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.RestoreState(System.Collections.Generic.Dictionary{System.String,System.Int64})">
            <summary>
            Restore state from checkpoint
            </summary>
            <param name="checkpointState">State to restore</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.CommitCheckpointOffsetsAsync(System.Int64)">
            <summary>
            Commit offsets after successful checkpoint
            </summary>
            <param name="checkpointId">Completed checkpoint ID</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.GetAssignment">
            <summary>
            Get current partition assignment
            </summary>
            <returns>List of assigned partitions</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.ValidateFlinkConfiguration">
            <summary>
            Validate Flink-optimal configuration
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.Dispose">
            <summary>
            Dispose resources
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkKafkaConsumerGroup.Dispose(System.Boolean)">
            <summary>
            Protected dispose pattern
            </summary>
            <param name="disposing">Whether disposing from Dispose() call</param>
        </member>
        <member name="T:Flink.JobBuilder.Flink.ConsumeResult">
            <summary>
            Result of consuming a message
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.TopicPartition">
            <summary>
            Topic partition representation
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.FlinkRedisSink">
            <summary>
            Apache Flink-style Redis sink for atomic operations and exactly-once semantics
            Supports stress testing with atomic counters and set operations
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.Extensions.Logging.ILogger{Flink.JobBuilder.Flink.FlinkRedisSink})">
            <summary>
            Constructor for FlinkRedisSink
            </summary>
            <param name="connectionString">Redis connection string</param>
            <param name="redisConfig">Redis configuration options</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initialize Redis connection with Flink-optimal settings
            </summary>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.AtomicIncrementAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Atomic increment operation for stress testing
            Used in 1M message stress tests with Redis counters
            </summary>
            <param name="key">Counter key</param>
            <param name="increment">Increment value (default: 1)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>New counter value after increment</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.AtomicSetAddAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Atomic set operation for exactly-once semantics
            Ensures message IDs are processed exactly once
            </summary>
            <param name="setKey">Set key for deduplication</param>
            <param name="member">Member to add to set</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if member was added (first time), false if already existed</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.SetContainsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if member exists in set (for exactly-once validation)
            </summary>
            <param name="setKey">Set key</param>
            <param name="member">Member to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.GetCounterValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get current counter value
            </summary>
            <param name="key">Counter key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Current counter value or 0 if key doesn't exist</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.GetSetSizeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get set size for validation
            </summary>
            <param name="setKey">Set key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of members in set</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.ExecuteTransactionAsync(System.Collections.Generic.IEnumerable{Flink.JobBuilder.Flink.RedisOperation},System.Threading.CancellationToken)">
            <summary>
            Execute Redis transaction for exactly-once semantics
            </summary>
            <param name="operations">Operations to execute atomically</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Transaction results</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.MaskConnectionString(System.String)">
            <summary>
            Mask connection string for logging (remove sensitive information)
            </summary>
            <param name="connectionString">Original connection string</param>
            <returns>Masked connection string</returns>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.Dispose">
            <summary>
            Dispose resources
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Flink.FlinkRedisSink.Dispose(System.Boolean)">
            <summary>
            Protected dispose pattern
            </summary>
            <param name="disposing">Whether disposing from Dispose() call</param>
        </member>
        <member name="T:Flink.JobBuilder.Flink.RedisOperationType">
            <summary>
            Redis operation types for transactions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.RedisOperation">
            <summary>
            Redis operation for transactions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Flink.RedisTransactionResult">
            <summary>
            Result of Redis transaction execution
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.FlinkJobBuilder">
            <summary>
            Fluent C# DSL for building Apache Flink streaming jobs
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.FromKafka(System.String,System.String)">
            <summary>
            Create a Kafka source for the streaming job
            </summary>
            <param name="topic">Kafka topic name</param>
            <param name="bootstrapServers">Kafka bootstrap servers (optional, can be configured via gateway)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.FromHttp(System.String,System.String,System.Int32)">
            <summary>
            Create an HTTP source for REST API polling
            </summary>
            <param name="url">HTTP URL to poll</param>
            <param name="method">HTTP method (default: GET)</param>
            <param name="intervalSeconds">Polling interval in seconds</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.FromDatabase(System.String,System.String,System.Int32)">
            <summary>
            Create a database source for polling queries
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="query">SQL query to execute</param>
            <param name="pollingIntervalSeconds">Polling interval in seconds</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Where(System.String)">
            <summary>
            Add a filter operation to the job
            </summary>
            <param name="expression">Filter expression (e.g., "Amount > 100")</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Where``1(System.Func{``0,System.Boolean})">
            <summary>
            Add a filter operation with a lambda expression
            </summary>
            <typeparam name="T">Type of the data</typeparam>
            <param name="predicate">Filter predicate</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.GroupBy(System.String)">
            <summary>
            Add a group by operation
            </summary>
            <param name="keyField">Field to group by (e.g., "Region")</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.GroupBy``2(System.Func{``0,``1})">
            <summary>
            Add a group by operation with a lambda expression
            </summary>
            <typeparam name="T">Type of the data</typeparam>
            <typeparam name="TKey">Type of the key</typeparam>
            <param name="keySelector">Key selector function</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Aggregate(System.String,System.String)">
            <summary>
            Add an aggregation operation
            </summary>
            <param name="aggregationType">Type of aggregation (SUM, COUNT, AVG, etc.)</param>
            <param name="field">Field to aggregate</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Aggregate``2(System.String,System.Func{``0,``1})">
            <summary>
            Add an aggregation operation with a lambda expression
            </summary>
            <typeparam name="T">Type of the data</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="aggregationType">Type of aggregation</param>
            <param name="fieldSelector">Field selector function</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Map(System.String)">
            <summary>
            Add a map/transform operation
            </summary>
            <param name="expression">Transformation expression</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Window(System.String,System.Int32,System.String)">
            <summary>
            Add a windowing operation
            </summary>
            <param name="windowType">Type of window (TUMBLING, SLIDING, etc.)</param>
            <param name="size">Window size</param>
            <param name="timeUnit">Time unit (SECONDS, MINUTES, etc.)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.AsyncHttp(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Add an async HTTP operation for non-blocking API calls
            </summary>
            <param name="url">HTTP URL to call</param>
            <param name="method">HTTP method</param>
            <param name="timeoutMs">Request timeout in milliseconds</param>
            <param name="headers">HTTP headers</param>
            <param name="bodyTemplate">Request body template</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.AsyncDatabase(System.String,System.String,System.Int32)">
            <summary>
            Add an async database operation
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="query">SQL query to execute</param>
            <param name="timeoutMs">Query timeout in milliseconds</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithState(System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Add state management for caching data
            </summary>
            <param name="stateKey">Key for the state</param>
            <param name="stateType">Type of state (value, list, map)</param>
            <param name="ttlMs">Time-to-live in milliseconds</param>
            <param name="defaultValue">Default value if state is empty</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithTimer(System.Int64,System.String,System.String)">
            <summary>
            Add a timer for scheduled operations
            </summary>
            <param name="delayMs">Delay in milliseconds</param>
            <param name="timerName">Name of the timer</param>
            <param name="action">Action to perform when timer fires</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithRetry(System.Int32,System.Collections.Generic.List{System.Int64},System.String,System.String)">
            <summary>
            Add retry logic with exponential backoff
            </summary>
            <param name="maxRetries">Maximum number of retries</param>
            <param name="delayPattern">Delay pattern in milliseconds</param>
            <param name="retryCondition">Condition to determine if retry is needed</param>
            <param name="deadLetterTopic">Topic for permanent failures</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithProcessFunction(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String})">
            <summary>
            Add a process function for complex stateful logic
            </summary>
            <param name="processType">Type of process function</param>
            <param name="parameters">Function parameters</param>
            <param name="stateKeys">State keys used by the function</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.WithSideOutput(System.String,System.String,Flink.JobBuilder.Models.ISinkDefinition)">
            <summary>
            Add side output for error handling
            </summary>
            <param name="outputTag">Tag for the side output</param>
            <param name="condition">Condition for routing to side output</param>
            <param name="sideOutputSink">Sink for the side output</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToKafka(System.String,System.String)">
            <summary>
            Set the output to a Kafka topic
            </summary>
            <param name="topic">Kafka topic name</param>
            <param name="bootstrapServers">Kafka bootstrap servers (optional)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToConsole">
            <summary>
            Set the output to console (for debugging)
            </summary>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToHttp(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Set the output to an HTTP endpoint
            </summary>
            <param name="url">HTTP URL to send data to</param>
            <param name="method">HTTP method (default: POST)</param>
            <param name="headers">HTTP headers</param>
            <param name="bodyTemplate">Request body template</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToDatabase(System.String,System.String,System.String)">
            <summary>
            Set the output to a database
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="table">Target table name</param>
            <param name="databaseType">Database type (postgresql, mysql, etc.)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToRedis(System.String,System.String,System.String)">
            <summary>
            Set the output to Redis for atomic operations and exactly-once semantics
            </summary>
            <param name="key">Redis key for operations</param>
            <param name="connectionString">Redis connection string (optional)</param>
            <param name="operationType">Redis operation type (increment, set, sadd, etc.)</param>
            <returns>FlinkJobBuilder for method chaining</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.BuildJobDefinition">
            <summary>
            Generate the Intermediate Representation (IR) for this job
            </summary>
            <returns>JobDefinition containing the IR</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.ToJson">
            <summary>
            Generate the JSON Intermediate Representation
            </summary>
            <returns>JSON string representing the job</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.Submit(System.String,System.Threading.CancellationToken)">
            <summary>
            Submit the job to the Flink Job Gateway
            </summary>
            <param name="jobName">Name for the job (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job submission result</returns>
        </member>
        <member name="M:Flink.JobBuilder.FlinkJobBuilder.SubmitAndWait(System.String,System.Threading.CancellationToken)">
            <summary>
            Submit the job and wait for completion (for bounded jobs)
            </summary>
            <param name="jobName">Name for the job (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job execution result</returns>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobDefinition">
            <summary>
            Complete job definition containing source, operations, and sink
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobMetadata">
            <summary>
            Metadata about the job
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.ISourceDefinition">
            <summary>
            Base interface for all source definitions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.KafkaSourceDefinition">
            <summary>
            Kafka source definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.FileSourceDefinition">
            <summary>
            File source definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.HttpSourceDefinition">
            <summary>
            HTTP source definition for REST API calls
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.DatabaseSourceDefinition">
            <summary>
            Database source definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.IOperationDefinition">
            <summary>
            Base interface for all operation definitions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.FilterOperationDefinition">
            <summary>
            Filter operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.MapOperationDefinition">
            <summary>
            Map/transform operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.GroupByOperationDefinition">
            <summary>
            Group by operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.AggregateOperationDefinition">
            <summary>
            Aggregation operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.WindowOperationDefinition">
            <summary>
            Windowing operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JoinOperationDefinition">
            <summary>
            Join operation definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.AsyncFunctionOperationDefinition">
            <summary>
            Async function operation for non-blocking I/O operations
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.ProcessFunctionOperationDefinition">
            <summary>
            Process function operation for complex stateful logic
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.StateOperationDefinition">
            <summary>
            State operation for managing stateful data
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.TimerOperationDefinition">
            <summary>
            Timer operation for scheduled processing
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.RetryOperationDefinition">
            <summary>
            Retry operation with exponential backoff
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.SideOutputOperationDefinition">
            <summary>
            Side output operation for error handling and dead letter patterns
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.ISinkDefinition">
            <summary>
            Base interface for all sink definitions
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.KafkaSinkDefinition">
            <summary>
            Kafka sink definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.ConsoleSinkDefinition">
            <summary>
            Console sink definition (for debugging)
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.FileSinkDefinition">
            <summary>
            File sink definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.DatabaseSinkDefinition">
            <summary>
            Database sink definition
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.HttpSinkDefinition">
            <summary>
            HTTP sink definition for REST API calls
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.RedisSinkDefinition">
            <summary>
            Redis sink definition for atomic operations and exactly-once semantics
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobSubmissionResult">
            <summary>
            Result of job submission to Flink Job Gateway
            </summary>
        </member>
        <member name="P:Flink.JobBuilder.Models.JobSubmissionResult.IsSuccess">
            <summary>
            Gets whether the submission was successful
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Models.JobSubmissionResult.CreateSuccess(System.String,System.String)">
            <summary>
            Creates a successful job submission result
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Models.JobSubmissionResult.CreateFailure(System.String,System.String)">
            <summary>
            Creates a failed job submission result
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobExecutionResult">
            <summary>
            Result of job execution (for bounded jobs)
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobStatus">
            <summary>
            Job status information
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.JobMetrics">
            <summary>
            Job execution metrics
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Models.FlinkJobGatewayConfiguration">
            <summary>
            Gateway service configuration
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Services.FlinkJobGatewayService">
            <summary>
            HTTP-based implementation for communicating with Flink Job Gateway
            </summary>
        </member>
        <member name="T:Flink.JobBuilder.Services.IFlinkJobGatewayService">
            <summary>
            Interface for communicating with Flink Job Gateway
            </summary>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.SubmitJobAsync(Flink.JobBuilder.Models.JobDefinition,System.Threading.CancellationToken)">
            <summary>
            Submit a job to the Flink cluster via the gateway
            </summary>
            <param name="jobDefinition">Job definition with IR</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job submission result</returns>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.GetJobStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the status of a running job
            </summary>
            <param name="flinkJobId">Flink job ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job status</returns>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.GetJobMetricsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get metrics for a running job
            </summary>
            <param name="flinkJobId">Flink job ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Job metrics</returns>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.CancelJobAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel a running job
            </summary>
            <param name="flinkJobId">Flink job ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if canceled successfully</returns>
        </member>
        <member name="M:Flink.JobBuilder.Services.IFlinkJobGatewayService.HealthCheckAsync(System.Threading.CancellationToken)">
            <summary>
            Test connectivity to the gateway
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if gateway is reachable</returns>
        </member>
    </members>
</doc>
